[{"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\index.js":"1","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\App.js":"2","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Mains.js":"3","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Washbasin.js":"4","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Taps.js":"5","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Toilet.js":"6","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Profile.js":"7","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Cart.js":"8","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Homepage.js":"9","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\LoginOwner.js":"10","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Detail.js":"11","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\BrandProducts.js":"12","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Wishlist.js":"13","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideNavbar.js":"14","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideBar.js":"15","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Login.js":"16","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\ProductsDisplay.js":"17","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Header.js":"18","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ColorLoader.js":"19","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\ViewModal.js":"20","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ImageLoader.js":"21","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\AddModal.js":"22","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Submenu.js":"23","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\functionHelper.js":"24","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\FullPreview.js":"25","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\DynamicCarousel.js":"26","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\shared\\constant.js":"27","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchBar.js":"28","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\CartDisplay.js":"29","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchResults.js":"30","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Confirm.js":"31"},{"size":645,"mtime":1622888325781,"results":"32","hashOfConfig":"33"},{"size":318,"mtime":1622888280311,"results":"34","hashOfConfig":"33"},{"size":1712,"mtime":1623590352486,"results":"35","hashOfConfig":"33"},{"size":3732,"mtime":1623447987262,"results":"36","hashOfConfig":"33"},{"size":3714,"mtime":1623446571634,"results":"37","hashOfConfig":"33"},{"size":3741,"mtime":1623446627902,"results":"38","hashOfConfig":"33"},{"size":4858,"mtime":1623446539574,"results":"39","hashOfConfig":"33"},{"size":7505,"mtime":1623446415417,"results":"40","hashOfConfig":"33"},{"size":9487,"mtime":1623526577628,"results":"41","hashOfConfig":"33"},{"size":4341,"mtime":1623494472870,"results":"42","hashOfConfig":"33"},{"size":10615,"mtime":1623446717984,"results":"43","hashOfConfig":"33"},{"size":3608,"mtime":1622063426617,"results":"44","hashOfConfig":"33"},{"size":5423,"mtime":1623446181273,"results":"45","hashOfConfig":"33"},{"size":9016,"mtime":1623602299427,"results":"46","hashOfConfig":"33"},{"size":2091,"mtime":1621113765662,"results":"47","hashOfConfig":"33"},{"size":18486,"mtime":1623602773696,"results":"48","hashOfConfig":"33"},{"size":6809,"mtime":1623496100947,"results":"49","hashOfConfig":"33"},{"size":9257,"mtime":1623601454302,"results":"50","hashOfConfig":"33"},{"size":1223,"mtime":1623494511504,"results":"51","hashOfConfig":"33"},{"size":1155,"mtime":1622067390231,"results":"52","hashOfConfig":"33"},{"size":616,"mtime":1622666700059,"results":"53","hashOfConfig":"33"},{"size":17974,"mtime":1623494520219,"results":"54","hashOfConfig":"33"},{"size":345,"mtime":1621113765665,"results":"55","hashOfConfig":"33"},{"size":1178,"mtime":1621971330462,"results":"56","hashOfConfig":"33"},{"size":429,"mtime":1622067556783,"results":"57","hashOfConfig":"33"},{"size":1036,"mtime":1623582239923,"results":"58","hashOfConfig":"33"},{"size":110,"mtime":1623603760933,"results":"59","hashOfConfig":"33"},{"size":3902,"mtime":1623498352088,"results":"60","hashOfConfig":"33"},{"size":6057,"mtime":1623494486386,"results":"61","hashOfConfig":"33"},{"size":4629,"mtime":1623494126974,"results":"62","hashOfConfig":"33"},{"size":1644,"mtime":1623602350574,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1bv9h8u",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\index.js",[],["134","135"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\App.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Mains.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Washbasin.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Taps.js",["136"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Toilet.js",["137"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Profile.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Cart.js",["138"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Homepage.js",["139"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\LoginOwner.js",["140","141"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Detail.js",["142","143","144"],"import React from 'react'\r\nimport { Component } from 'react';\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport axios from 'axios'\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nimport SideNavbar from './SideNavbar'\r\nimport SideBar from './SideBar'\r\nimport { ImageLoader } from '../FunctionalComponent/ImageLoader';\r\nimport { ColorLoader } from '../FunctionalComponent/ColorLoader';\r\nimport ViewModal from '../Modals/ViewModal'\r\nimport Login from '../Login';\r\nimport { Tab, Tabs } from 'react-bootstrap';\r\nimport SearchBar from './SearchBar';\r\n\r\nimport '../../css/Detail.css'\r\nclass Detail extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            productId: this.props.match.params.id,\r\n            details: null,\r\n            category: this.props.match.params.category,\r\n            isModalOpen: false,\r\n            product: null,\r\n            cartClass: \"col-8 btn btn-outline-warning btn-lg m-5\",\r\n            class: \"col-8 btn btn-outline-secondary btn-lg\",\r\n            wishlist: \"Add To Wishlist\",\r\n            notrefresh: null,\r\n            isLoginModal: false,\r\n            cart: \"Add to Cart\"\r\n        }\r\n\r\n        this.AddToWIshlist = this.AddToWIshlist.bind(this)\r\n        this.toggleModal = this.toggleModal.bind(this)\r\n        this.AddToCart = this.AddToCart.bind(this)\r\n    }\r\n    async componentWillMount() {\r\n        await axios.get(`${url}/customer/info/${localStorage.getItem(\"Ctoken\")}`)\r\n            .then(CustomerCart => {\r\n                console.log(CustomerCart)\r\n                if (CustomerCart.data.Bag && CustomerCart.data.Bag.length) {\r\n                    for (let i = 0; i < CustomerCart.data.Bag.length; i++) {\r\n                        if (CustomerCart.data.Bag[i].category === this.state.category && CustomerCart.data.Bag[i].productId === this.state.productId) {\r\n                            this.setState({\r\n                                cartClass: \"col-8 btn btn-warning btn-lg m-5\",\r\n                                cart: \"Remove from Cart\"\r\n                            })\r\n                            break\r\n                        }\r\n                        else {\r\n                            this.setState({\r\n                                cartClass: \"col-8 btn btn-outline-warning btn-lg m-5\",\r\n                                cart: \"Add to Cart\"\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        cartClass: \"col-8 btn btn-outline-warning btn-lg m-5\",\r\n                        cart: \"Add to Cart\"\r\n                    })\r\n                }\r\n            })\r\n        axios.get(`${url}/${this.state.category}/info/${this.state.productId}`)\r\n            .then(res => {\r\n                this.setState({\r\n                    details: res.data[0].map((p, i) => {\r\n                        return (\r\n                            <Row key={i} className=\"shadow-lg bg-white rounded rowSize col-11 ml-auto mr-lg-4 marginTopDetail\">\r\n                                <Col className=\"col-12 col-xl-7 manageHeight\" onClick={p.Image.length ? () => this.toggleViewModal(p) : null}>\r\n                                    <ImageLoader className=\"col-12\" image={p.Image} length={p.Image.length} category={this.state.category} />\r\n                                </Col>\r\n                                <Col className=\"mt-5 mb-5 col-12 col-xl-5\">\r\n                                    <h1 style={{ color: \"darkkhaki\", fontWeight: \"bolder\" }}>{p.Name}</h1>\r\n                                    <h2>{p.Brand}</h2>\r\n                                    <h1>Rs. {p.Price}</h1>\r\n                                    <p>On order below than Rs. 1800 shipping Charges will be applied.</p>\r\n                                    <Row className=\"col-12\">\r\n                                        <ColorLoader color={res.data[2]} currentProductId={this.state.productId} colorProductId={res.data[1]} category={this.state.category} />\r\n                                    </Row>\r\n                                    <h3>Size(Width * Height): {p.Size.Width}x{p.Size.Height}</h3>\r\n                                    <div className=\"col-8 bg-warning m-auto\"><p>Choose color to know your product price.</p></div>\r\n                                    <Button onClick={this.AddToCart} id={p._id + \"cart\"} className={this.state.cartClass}><i className=\"fa fa-shopping-bag\" aria-hidden=\"true\"></i>{this.state.cart}</Button>\r\n                                    {\r\n                                        p.Customers.map((customer) => {\r\n                                            if (customer === localStorage.getItem(\"Ctoken\")) {\r\n                                                this.setState({\r\n                                                    class: \"col-8 btn btn-secondary btn-lg\",\r\n                                                    wishlist: \"Wishlisted\"\r\n                                                })\r\n                                                return;\r\n                                            }\r\n                                            else {\r\n                                                this.setState({\r\n                                                    class: \"col-8 btn btn-outline-secondary btn-lg\",\r\n                                                    wishlist: \"Add To Wishlist\"\r\n                                                })\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                    <Button onClick={this.AddToWIshlist} id={p._id + \"button\"} className={this.state.class}><i id={p._id + \"button\"} className=\"fa fa-heart custom-fa-heart\" aria-hidden=\"true\"></i>{this.state.wishlist}</Button>\r\n                                    <Tabs className=\"mt-3 navLinkManageStyling\" defaultActiveKey=\"description\" id=\"uncontrolled-tab-example\">\r\n                                        <Tab eventKey=\"description\" title=\"Description\">\r\n                                            {p.Description}\r\n                                        </Tab>\r\n                                        <Tab eventKey=\"features\" title=\"Features\">\r\n                                            {p.Features}\r\n                                        </Tab>\r\n                                    </Tabs>\r\n                                </Col>\r\n                            </Row>\r\n                        );\r\n                    })\r\n                })\r\n            })\r\n    }\r\n    toggleViewModal(p) {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen,\r\n            product: p\r\n        })\r\n    }\r\n    AddToWIshlist(e) {\r\n        const customerId = localStorage.getItem('Ctoken')\r\n        let productId = e.target.id\r\n        productId = productId.substring(0, productId.length - 6)\r\n        let color;\r\n        let category = this.state.category\r\n        if (this.state.wishlist == \"Wishlisted\") {\r\n            color = \"rgb(255, 0, 0)\"\r\n        }\r\n        else {\r\n            color = \"rgb(211, 211, 211)\"\r\n        }\r\n        if (customerId) {\r\n            axios.post(`${url}/customer/wishlist`, { customerId, productId, color, category })\r\n                .then(res => {\r\n                    return;\r\n                })\r\n            axios.post(`${url}/${this.state.category}/addCustomer`, { productId, customerId, color })\r\n                .then(res => {\r\n                    if (res.data.message) {\r\n                        this.setState({\r\n                            notRefreshed: \"Please refresh the page. Some of the items has been Updated in Wishlist.\",\r\n                            class: [\"col-8\", \"btn\", \"btn-outline-secondary\", \"btn-lg\"],\r\n                            wishlist: this.state.wishlist\r\n                        })\r\n                    }\r\n                    else{\r\n                        window.location.reload()\r\n                    }\r\n                })\r\n\r\n            setTimeout(() => {\r\n                document.getElementById(e.target.id).innerHTML = `<i id=${productId + \"button\"} class=\"fa fa-heart custom-fa-heart\" aria-hidden=\"true\"></i>`\r\n                const b = document.getElementById(e.target.id)\r\n                b.classList = \"\"\r\n                b.classList.add(this.state.class[0], this.state.class[1], this.state.class[2], this.state.class[3])\r\n                var newElem = document.createTextNode(this.state.wishlist)\r\n                b.appendChild(newElem)\r\n\r\n            }, 100)\r\n        }\r\n        else {\r\n\r\n            this.toggleModal()\r\n        }\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isLoginModal: !this.state.isLoginModal\r\n        })\r\n    }\r\n\r\n    AddToCart(e) {\r\n\r\n        const customerId = localStorage.getItem('Ctoken')\r\n        let productId = this.state.productId\r\n        let category = this.state.category\r\n        let cart = this.state.cart\r\n        if (customerId) {\r\n            axios.post(`${url}/customer/add/cart`, { customerId, productId, category, cart })\r\n                .then(res => {\r\n                    if (!(res.data.error || res.err)) {\r\n                        window.location.reload()\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            notRefreshed: res.data.error\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            this.toggleModal()\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ overflowX: 'hidden' }}>\r\n\r\n                <SideNavbar/>\r\n                <SearchBar/>\r\n                {this.state.notRefreshed ?\r\n                    <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                        <p>{this.state.notRefreshed}</p>\r\n                        <Button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </Button>\r\n                    </div> : null}\r\n                {this.state.details}\r\n                <SideBar category={this.props.match.params.category} />\r\n                {this.state.isModalOpen && <ViewModal category={this.state.category} toggleViewModal={() => this.toggleViewModal()} product={this.state.product} isModelOpen={this.state.isModalOpen} />}\r\n                {this.state.isLoginModal && <Login isModalOpen={this.state.isLoginModal} toggleModal={() => this.toggleModal()} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Detail;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\BrandProducts.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Wishlist.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideNavbar.js",["145","146","147","148","149","150","151"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideBar.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Login.js",["152","153","154","155","156","157","158","159","160","161","162","163","164"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\ProductsDisplay.js",["165","166","167"],"import React, { Component } from 'react'\r\nimport { Card, CardBody, CardTitle, Col, Row } from 'reactstrap'\r\nimport axios from 'axios'\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nimport { ImageLoader } from '../FunctionalComponent/ImageLoader'\r\nimport '../../css/ProductDisplay.css'\r\n\r\nclass ProductDisplay extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            isOpen:false,\r\n            color:\"lightgrey\",\r\n            notRefreshed:null\r\n        }\r\n        this.AddToWishlist = this.AddToWishlist.bind(this)\r\n    }\r\n    componentDidMount(){\r\n\r\n        if(this.props.product.Customers){\r\n            this.props.product.Customers.map((customer)=>{\r\n                if(customer==localStorage.getItem('Ctoken')){\r\n                    this.setState({\r\n                        color:\"red\"\r\n                    })\r\n                    return;\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        color:\"lightgrey\"\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    AddToWishlist(e) {\r\n        let productId=e.target.id;\r\n        productId=productId.substring(0,productId.length-6)\r\n        let customerId=localStorage.getItem(\"Ctoken\")\r\n        let category=this.props.category\r\n        if(customerId){        \r\n            var color=window.getComputedStyle(document.getElementById(e.target.id), null).getPropertyValue('color')\r\n            axios.post(`${url}/customer/wishlist`,{customerId,productId,color,category})\r\n            .then(res=>{\r\n                    return;\r\n            })\r\n            axios.post(`${url}/${this.props.category}/addCustomer`,{productId,customerId,color})\r\n            .then(res=>{\r\n                if (res.data.message) {\r\n                    this.setState({\r\n                        notRefreshed:\"Please refresh the page. Some of the items has been Updated in Wishlist.\"\r\n                    })\r\n                }\r\n                else if(color === 'rgb(211, 211, 211)'){\r\n                    document.getElementById(e.target.id).style.color = \"red\";\r\n                    let corr=document.getElementById(e.target.id).getBoundingClientRect ()\r\n                    this.props.addanimation(true,corr.x,corr.y)\r\n                    this.setState({\r\n                        notRefreshed:null\r\n                    })\r\n                }\r\n                else{\r\n                    document.getElementById(e.target.id).style.color = \"lightgrey\";\r\n                    this.props.addanimation(false,null,null)\r\n                    this.setState({\r\n                        notRefreshed:null\r\n                    })\r\n                }\r\n                this.props.notRefreshed(this.state.notRefreshed)\r\n            })\r\n        }\r\n        else{\r\n            this.props.toggleModal();\r\n        }\r\n    }\r\n    productDetail(id){\r\n        window.open(`/${this.props.category}/detail/${id}`)\r\n    }\r\n    render() {\r\n        return (\r\n            <Col className=\"col-10 col-sm-5 col-lg-4 col-xl-2 m-1 m-auto m-sm-0 m-lg-auto m-xl-2\" key={this.props.key}>\r\n\r\n                {/* Will only be visible if window size is xs, sm */}\r\n                <Row onClick={()=>this.productDetail(this.props.product._id)} className=\"visibilityAccordance col-10 d-sm-none mt-5 pb-3\">\r\n                    <Row className=\"col-12 p-0 m-auto flex-nowrap\">\r\n                    <Col className=\"removePadding\">\r\n                        <ImageLoader category={this.props.category} image={this.props.product.Image[0]?this.props.product.Image[0]:null} length={1}/>\r\n                    </Col>\r\n                    </Row>\r\n                    <Row className=\"col-12 p-0 m-auto\">\r\n                    <Col>\r\n                        <div variant=\"subtitle1\">\r\n                            <div className=\"sub\">\r\n                                {this.props.product.Name} <span style={{fontWeight:\"100\",fontSize:\"12px\"}}> {this.props.product.Size.Width}x{this.props.product.Size.Height}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div variant=\"bod2\">\r\n                            <div className=\"body2\">\r\n                                {this.props.product.Brand}\r\n                            </div>\r\n                        </div>\r\n                        <div style={{fontWeight:\"100\",fontSize:\"12px\"}}>\r\n                                {this.props.product.Colors}\r\n                        </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Row>\r\n\r\n                {/* Will only be visible if window size is md or lg or xl */}\r\n                <Card className=\"shadow-lg mb-2 bg-white rounded visibilityAccess d-none d-sm-block\">\r\n                    <CardTitle id={this.props.product._id} onClick={()=>this.productDetail(this.props.product._id)} style={{padding:\"0px\"}}>\r\n                        <ImageLoader category={this.props.category} image={this.props.product.Image[0]?this.props.product.Image[0]:null} length={1} />\r\n                    </CardTitle>\r\n                    <CardBody id={this.props.product._id} style={{minHeight:\"110px\",maxHeight:\"fit-content\", paddingTop: \"0\" }}>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"subCard\">\r\n                                    {this.props.product.Name}\r\n                                </div>\r\n                                <div style={{fontWeight:\"100\",fontSize:'0.7rem',fontFamily:\"monospace\",textAlign:\"left\"}}>\r\n                                    {this.props.product.Colors}   <span style={{fontFamily:\"monospace\"}}>{this.props.product.Size.Width}x{this.props.product.Size.Height}</span>\r\n                                </div>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"body2Card\">\r\n                                    <p style={{margin:\"0\"}}>{this.props.product.Brand}</p>\r\n                                    <p style={{margin:\"0\"}}>Rs. {this.props.product.Price}</p>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"col-12\">\r\n                                <div className=\"col-2 ml-auto\"><i id={this.props.product._id+\"button\"} onClick={this.AddToWishlist} className=\"fa fa-heart fa-2x\" style={{color:this.state.color}} aria-hidden=\"true\"></i></div>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProductDisplay;\r\n\r\n","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Header.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ColorLoader.js",["168","169","170"],"import React, { Component } from 'react'\r\nimport { Col } from 'reactstrap'\r\n\r\n\r\nexport function ColorLoader(props) {\r\n    function addColorSelection(category,colorProductId) {\r\n        // props.colorPrice(e.target.id)\r\n        // let circle=document.getElementsByClassName(\"rounded-circle\")\r\n        // let i=0\r\n        // while(circle[i]){\r\n        //     if(circle[i].id===e.target.id){\r\n        //         circle[i].innerHTML=\"<i className='fa fa-check' style={{color:'blue'}} aria-hidden='true'></i>\"\r\n        //     }\r\n        //     else{\r\n        //         circle[i].innerHTML=\"\"\r\n        //     }\r\n        //     i++;\r\n        // }\r\n        window.location.href=`/${category}/detail/${colorProductId}`\r\n    }\r\n    var array = []\r\n    var colors = props.color\r\n    \r\n    colors.map((c, i) => {\r\n        array.push(<Col className=\"m-auto col-1 col-sm-2\"><p>{c}</p><div id={i} onClick={()=>addColorSelection(props.category,props.colorProductId[i])} style={{ display: \"inline\", margin: \"0px\" }} className=\"rounded-circle custom-circle\" style={{ backgroundColor: c }}>{props.currentProductId===props.colorProductId[i]?<i className='fa fa-check' aria-hidden='true'></i>:null}</div></Col>)\r\n    })\r\n    return array;\r\n\r\n}","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\ViewModal.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ImageLoader.js",["171","172"],"import React from 'react';\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nimport DynamicCarousel from '../CommonComponents/DynamicCarousel'\r\n\r\nexport function ImageLoader(props){\r\n\r\n    let image=url + \"/\" + props.category + \"/images\" + \"/\" + props.image\r\n\r\n    return(\r\n        <div style={{height:\"100%\"}} >\r\n            {props.length==1?\r\n            <img id={props.id} className=\"image col-md-12\"\r\n            src={props.image!==null?image:null}\r\n            alt={props.image!==null?props.image:null}/>:\r\n            <DynamicCarousel category={props.category} image={props.image}/>}\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\AddModal.js",["173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197"],"import React, { Component } from 'react';\r\nimport { Button, Col, Label, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport { LocalForm, Control, Errors } from 'react-redux-form'\r\nimport Axios from 'axios';\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nvar required = (val) => val && val.length;\r\nvar dataType = (val) => !(val) || /\\d+$/i.test(val);\r\nclass AddModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModal: this.props.isModalOpen\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.toggleAddModal = this.toggleAddModal.bind(this)\r\n        this.addCost = this.addCost.bind(this)\r\n    }\r\n    handleSubmit(values) {\r\n        const formData= new FormData();\r\n        formData.append('name',values.name)\r\n        formData.append(\"catalogue\",values.catalogue)\r\n        formData.append('width',values.width)\r\n        formData.append('Height',values.Height)\r\n        formData.append('material',values.material)\r\n        formData.append('warranty',values.warranty)\r\n        formData.append('brand',values.brand)\r\n        formData.append('desc',values.desc)\r\n        formData.append('features',values.features)\r\n        \r\n        formData.append('colors',values.colors)\r\n        let array=[]\r\n        let quantityArray=[]\r\n        let imageLength=[]\r\n        for(let i=0;i<values.colors.length;i++){\r\n            let price=\"price\"+values.colors[i]\r\n            let quantity=\"quantity\"+values.colors[i]\r\n            let im=\"image\"+values.colors[i]\r\n            if(values[im]){\r\n            for(var j=0;j<values[im].length;j++){\r\n                formData.append('file',values[im][j])\r\n            }\r\n            }\r\n            imageLength[i]=values[im] ? values[im].length : 0\r\n            array[i]=values[price]\r\n            quantityArray[i]=values[quantity]\r\n            \r\n        }\r\n        formData.append('price',array)\r\n        formData.append('quantity',quantityArray)\r\n        formData.append(\"imageLength\",[imageLength])\r\n        Axios.post(`${url}/${this.props.category}/add`,formData)\r\n        .then(res=>{\r\n            // window.location.href=`${url}/${this.props.category}`\r\n            console.log(res.data)\r\n        })\r\n    }\r\n    async toggleAddModal() {\r\n        await this.setState({\r\n            isModal: !this.state.isModal\r\n        });\r\n\r\n        this.props.toggleAddModal(this.state.isModal)\r\n    }\r\n    async addCost(e) {\r\n        let option = document.getElementsByTagName(\"option\")\r\n        let i = 0\r\n        while (option[i]) {\r\n            if (option[i].selected) {\r\n                document.getElementById(\"price\" + option[i].value).classList.remove(\"d-none\")\r\n                document.getElementById(\"quantity\" + option[i].value).classList.remove(\"d-none\")\r\n                document.getElementById(\"image\" + option[i].value).classList.remove(\"d-none\")\r\n            }\r\n            else {\r\n                document.getElementById(\"price\" + option[i].value).classList.add(\"d-none\")\r\n                document.getElementById(\"quantity\" + option[i].value).classList.add(\"d-none\")\r\n                document.getElementById(\"image\" + option[i].value).classList.add(\"d-none\")\r\n            }\r\n            i = i + 1;\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal style={{ minWidth: \"60%\" }} isOpen={this.state.isModal} toggle={this.toggleAddModal}>\r\n                <ModalHeader\r\n                    style={{ backgroundColor: \"#3464eb\", color: \"white\" }}\r\n                    toggle={this.toggleAddModal}\r\n                >\r\n                    <h3>Add New {this.props.category.toUpperCase()}</h3>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container\">\r\n                        <LocalForm encType=\"multipart/form-data\" onSubmit={this.handleSubmit} className=\"col-md-10\" validateOn=\"submit\">\r\n                            <Row className=\"form-group\" md={12}>\r\n                                <Label htmlFor=\"name\" md={3}><span style={{ color: \"red\" }}>* </span> Name: </Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".name\" id=\"name\" name=\"name\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".name\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"catalogue\" md={3}><span style={{ color: \"red\" }}>* </span> Catalogue No: </Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".catalogue\" id=\"catalogue\" name=\"catalogue\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".catalogue\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"size\"><span style={{ color: \"red\" }}>* </span> Size: </Label>\r\n                                <Col>\r\n                                    <Label htmlFor=\"width\"><span style={{ color: \"red\" }}>* </span> Width: </Label>\r\n                                    <Control.text className=\"form-control\" model=\".width\" id=\"width\" name=\"width\" validators={{ required, dataType }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".width\"\r\n                                        messages={{\r\n                                            required: \"This feild is required\",\r\n                                            dataType: \"Should be a Number\"\r\n                                        }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Label htmlFor=\"Height\"><span style={{ color: \"red\" }}>* </span> Height: </Label>\r\n                                    <Control.text className=\"form-control\" model=\".Height\" id=\"Height\" name=\"Height\" validators={{ required, dataType }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".Height\"\r\n                                        messages={{\r\n                                            required: \"This feild is required\",\r\n                                            dataType: \"Should be a Number\"\r\n                                        }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"colors\"><span style={{ color: \"red\" }}>* </span> Colors: </Label>\r\n                                <Col>\r\n                                    <Control.select onBlur={this.addCost} multiple className=\"form-control\" id=\"colors\" model=\".colors\" name=\"colors\" validators={{ required }}>\r\n                                        <option>White</option>\r\n                                        <option>Black</option>\r\n                                        <option>Grey</option>\r\n                                        <option>Ivory</option>\r\n                                        <option>Blue</option>\r\n                                    </Control.select>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".colors\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"price[]\"><span style={{ color: \"red\" }}>* </span> Price: </Label>\r\n                                <Col className=\"col-12 col-lg-9\">\r\n                                    <Row className=\"col-12\">\r\n                                        <Col id=\"priceBlack\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceBlack\"><span style={{ color: \"red\" }}>* </span> Black: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceBlack\" name=\"price[]\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceWhite\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceWhite\"><span style={{ color: \"red\" }}>* </span> White: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceWhite\" name=\"priceWhite\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceGrey\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceGrey\"><span style={{ color: \"red\" }}>* </span> Grey: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceGrey\" name=\"priceGrey\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceBlue\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceBlue\"><span style={{ color: \"red\" }}>* </span> Blue: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceBlue\" name=\"priceBlue\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceIvory\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceIvory\"><span style={{ color: \"red\" }}>* </span> Ivory: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceIvory\" name=\"priceIvory\" />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"brand\"><span style={{ color: \"red\" }}>* </span> Brand: </Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".brand\" id=\"brand\" name=\"brand\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".brand\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"image\">Image: </Label>\r\n                                <Col className=\"col-12 col-lg-9\">                                \r\n                                        <Col id=\"imageBlack\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageBlack\">Black: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageBlack\" name=\"imageBlack\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageWhite\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageWhite\">White: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageWhite\" name=\"imageWhite\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageGrey\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageGrey\">Grey: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageGrey\" name=\"imageGrey\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageBlue\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageBlue\">Blue: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageBlue\" name=\"imageBlue\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageIvory\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageIvory\">Ivory: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageIvory\" name=\"imageIvory\" />\r\n                                        </Col>     \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"quantity\"><span style={{ color: \"red\" }}>* </span> Quantity: </Label>\r\n                                <Col className=\"col-12 col-lg-9\">                                \r\n                                        <Col id=\"quantityBlack\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityBlack\">Black: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityBlack\" name=\"quantityBlack\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityWhite\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityWhite\">White: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityWhite\" name=\"quantityWhite\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityGrey\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityGrey\">Grey: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityGrey\" name=\"quantityGrey\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityBlue\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityBlue\">Blue: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityBlue\" name=\"quantityBlue\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityIvory\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityIvory\">Ivory: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityIvory\" name=\"quantityIvory\" />\r\n                                        </Col>     \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"warranty\"><span style={{ color: \"red\" }}>* </span> Warranty:</Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".warranty\" id=\"warranty\" name=\"warranty\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".warranty\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Label md={3} htmlFor=\"material\">Material: </Label>\r\n                                <Col>\r\n                                    <Control.text name=\"material\" className=\"form-control\" model=\".material\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"desc\">Description: </Label>\r\n                                <Col>\r\n                                    <Control.textarea rows=\"5\" className=\"form-control\" model=\".desc\" id=\"desc\" name=\"desc\"></Control.textarea>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"features\">Features: </Label>\r\n                                <Col>\r\n                                    <Control.textarea rows=\"5\" className=\"form-control\" model=\".features\" id=\"features\" name=\"features\"></Control.textarea>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ offset: 4 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">Submit</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddModal;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Submenu.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\functionHelper.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\FullPreview.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\DynamicCarousel.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\shared\\constant.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchBar.js",["198"],"import { React, Component } from 'react'\r\nimport { Control, LocalForm } from 'react-redux-form';\r\nimport { Button, Row, Col } from 'reactstrap'\r\nimport axios from 'axios'\r\n\r\nimport { url } from '../../shared/constant'\r\nimport '../../css/SearchBar.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      typingTimer: 1,\r\n      doneTypingInterval: 1000,\r\n      searchArray: [],\r\n      active: false\r\n    }\r\n    this.searchProduct = this.searchProduct.bind(this)\r\n    this.doneTyping = this.doneTyping.bind(this)\r\n    this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    this.searchResults = this.searchResults.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('mousedown', this.handleClickOutside);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mousedown', this.handleClickOutside);\r\n  }\r\n  handleClickOutside(event) {\r\n    setTimeout(()=>{\r\n      document.getElementById(\"searchArray\").style.display = \"none\"\r\n    },500)\r\n      \r\n  }\r\n  searchProduct(e) {\r\n    clearTimeout(this.state.typingTimer);\r\n    this.setState({\r\n      typingTimer: setTimeout(this.doneTyping, this.state.doneTypingInterval)\r\n    })\r\n  }\r\n  doneTyping() {\r\n    let search = document.getElementById(\"globalsearch\").value\r\n    axios.post(`${url}/masterproducts/search`, { search })\r\n      .then((res) => {\r\n        if (res.data.length) {\r\n          this.setState({\r\n            searchArray: res.data.map((matchedProducts) => {\r\n              return (matchedProducts)\r\n            })\r\n          })\r\n        }\r\n        else {\r\n          this.setState({\r\n            searchArray: []\r\n          })\r\n        }\r\n      })\r\n    search ? document.getElementById(\"searchArray\").style.display = \"block\" : document.getElementById(\"searchArray\").style.display = \"none\";\r\n  }\r\n  renderto(category, id) {\r\n    window.open(`/${category}/detail/${id}`)\r\n  }\r\n  searchResults() {\r\n    document.getElementById(\"searchArray\").style.display = \"none\";\r\n    document.getElementById('openSearchResults').click()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-12 shadow-lg custom-color rounded styling\">\r\n        <LocalForm id=\"searchLocalForm\" className=\"searchBar pt-4 pb-4 col-8 col-sm-10 m-auto\" onSubmit={this.searchResults} onChange={this.searchProduct}>\r\n          <Row className=\"form-group\">\r\n            <Col className=\"col-9 col-sm-10 col-md-11 p-0\">\r\n              <Control.text id=\"globalsearch\" className=\"form-control\" placeholder=\"Search\" model=\".search\" />\r\n              <Col className=\"p-0 m-0\">\r\n                <ul className=\"form-control\" id=\"searchArray\" style={{ position: 'absolute', display: \"none\", boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\", backgroundColor: \"white\", listStyleType: \"none\", height: \"fit-content\" }}>\r\n                  {this.state.searchArray.slice(0,5).map((ele,i) => {\r\n                    return (\r\n                      <li key={i} style={{ marginLeft: \"0\", maxHeight: \"50px\", padding: \"10px\", cursor: 'pointer' }} onClick={() => { this.renderto(ele.category, ele._id) }}>{(ele.Brand + \" \" + ele.Name + \" \" + ele.Colors).toLowerCase()}</li>\r\n                    )\r\n                  })\r\n                  }\r\n                </ul>\r\n              </Col>\r\n            </Col>\r\n            <Col className=\"p-0\">\r\n              <Button type=\"submit p-0\">\r\n                <Link id=\"openSearchResults\"\r\n                to={{\r\n                  pathname: `/searchresults`,\r\n                  state: {\r\n                    sa: this.state.searchArray,\r\n                  },\r\n                }}>\r\n                <i className=\"fa fa-search\"/>\r\n                </Link>\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </LocalForm>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default SearchBar","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\CartDisplay.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchResults.js",["199","200","201"],"import React, { Component } from 'react';\r\nimport { Button, Row, Col } from 'reactstrap';\r\n\r\nimport SideNavbar from './SideNavbar';\r\nimport SideBar from './SideBar'\r\nimport ProductDisplay from './ProductsDisplay';\r\nimport Login from '../Login';\r\nimport SearchBar from './SearchBar';\r\nimport '../../css/Washbasin.css'\r\nclass SearchResults extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            search_Results_list: this.props.history.location.state.sa,\r\n            search_reasult:null,\r\n            isModalOpen: false,\r\n            notrefresh: null,\r\n            xCor: 0,\r\n            yCor: 0\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        // console.log(this.props.history.location.state.sa)\r\n        if(this.props.history.location.state.sa.length){\r\n            this.setState({\r\n                search_Results: this.state.search_Results_list.map((wb, i) => {\r\n                    return (\r\n                        <ProductDisplay key={i} addanimation={(val, x, y) => this.addanimation(val, x, y)} toggleModal={() => this.toggleModal()} notRefreshed={(res) => this.notRefreshed(res)} category={'washbasin'} product={wb} key={i} />\r\n                    );\r\n                })\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        if(this.props.history.location.state.sa!=this.state.search_Results_list){\r\n        this.setState({\r\n            search_Results_list:this.props.history.location.state.sa\r\n        })\r\n        this.setState({\r\n            search_Results:this.props.history.location.state.sa.map((wb, i) => {\r\n                return (\r\n                    <ProductDisplay key={i} addanimation={(val, x, y) => this.addanimation(val, x, y)} toggleModal={() => this.toggleModal()} notRefreshed={(res) => this.notRefreshed(res)} category={'washbasin'} product={wb} key={i} />\r\n                );\r\n            })\r\n        })\r\n    }\r\n    }\r\n    notRefreshed(res) {\r\n        this.setState({\r\n            notrefresh: res\r\n        })\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        })\r\n    }\r\n    addanimation(val, x, y) {\r\n        this.setState({\r\n            xCor: x,\r\n            yCor: y\r\n        })\r\n        if (val) {\r\n            let animateRow = document.getElementsByClassName(\"animateRow\")\r\n            animateRow[0].classList.add(\"animateRowZIndex\")\r\n            let animation = document.getElementsByClassName(\"animateId\")\r\n            animation[0].classList.add(\"animateWishlistButton\");\r\n            setTimeout(() => {\r\n                animateRow[0].classList.remove(\"animateRowZIndex\")\r\n                animation[0].classList.remove(\"animateWishlistButton\");\r\n            }, 1000)\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ overflowX: 'hidden' }}>\r\n                <SideNavbar />\r\n                <SearchBar className=\"col-12\" />\r\n                <Row className=\"col-12 marginTop\">\r\n                    <Col className=\"col-8 m-auto\">\r\n                        {this.state.notrefresh ?\r\n                            <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                <p>{this.state.notrefresh}</p>\r\n                                <Button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </Button>\r\n                            </div> : null\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{ position: \"fixed\" }} className=\"col-10 offset-2 animateRow\">\r\n                    <i className=\"fa fa-heart fa-5x animateId\" style={{ marginLeft: this.state.xCor - 300, marginTop: this.state.yCor - 200, color: \"red\" }}></i>\r\n                </Row>\r\n                <p id=\"searchArray\"></p>\r\n                <Row className=\"col-11 col-xl-12 p-0\" style={{ marginLeft: \"65px\" }} >\r\n                {this.state.search_Results!==null?this.state.search_Results:<div className=\"m-auto pl-2 pr-5\"><p className=\"m-auto\" style={{fontWeight:\"700\",fontSize:\"2rem\",color:'grey'}}>No Records found</p><div><p style={{color:'grey'}}>Either you didn't type anything or there are no matching results to your search.</p></div></div>}\r\n                </Row>\r\n\r\n                {this.state.isModalOpen && <Login isModalOpen={this.state.isModalOpen} toggleModal={() => this.toggleModal()} />}\r\n                <SideBar category='washbasin' />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SearchResults;\r\n\r\n\r\n            ","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Confirm.js",[],{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":13,"column":8,"nodeType":"208","messageId":"209","endLine":13,"endColumn":21},{"ruleId":"206","severity":1,"message":"207","line":13,"column":8,"nodeType":"208","messageId":"209","endLine":13,"endColumn":21},{"ruleId":"210","severity":1,"message":"211","line":44,"column":67,"nodeType":"212","messageId":"213","endLine":44,"endColumn":69},{"ruleId":"214","severity":1,"message":"215","line":65,"column":21,"nodeType":"216","messageId":"217","endLine":65,"endColumn":192},{"ruleId":"214","severity":1,"message":"215","line":52,"column":45,"nodeType":"216","messageId":"217","endLine":52,"endColumn":154},{"ruleId":"214","severity":1,"message":"218","line":65,"column":49,"nodeType":"216","messageId":"217","endLine":65,"endColumn":166},{"ruleId":"210","severity":1,"message":"211","line":88,"column":68,"nodeType":"212","messageId":"213","endLine":88,"endColumn":70},{"ruleId":"210","severity":1,"message":"219","line":94,"column":49,"nodeType":"220","messageId":"221","endLine":94,"endColumn":56},{"ruleId":"222","severity":1,"message":"223","line":132,"column":33,"nodeType":"224","messageId":"225","endLine":132,"endColumn":35},{"ruleId":"226","severity":1,"message":"227","line":126,"column":83,"nodeType":"216","endLine":126,"endColumn":144},{"ruleId":"226","severity":1,"message":"227","line":139,"column":80,"nodeType":"216","endLine":139,"endColumn":149},{"ruleId":"226","severity":1,"message":"227","line":152,"column":78,"nodeType":"216","endLine":152,"endColumn":142},{"ruleId":"228","severity":1,"message":"229","line":163,"column":41,"nodeType":"216","endLine":163,"endColumn":140},{"ruleId":"228","severity":1,"message":"229","line":167,"column":62,"nodeType":"216","endLine":167,"endColumn":95},{"ruleId":"228","severity":1,"message":"229","line":173,"column":41,"nodeType":"216","endLine":173,"endColumn":137},{"ruleId":"228","severity":1,"message":"229","line":178,"column":41,"nodeType":"216","endLine":178,"endColumn":71},{"ruleId":"214","severity":1,"message":"215","line":114,"column":49,"nodeType":"216","messageId":"217","endLine":114,"endColumn":165},{"ruleId":"214","severity":1,"message":"218","line":128,"column":49,"nodeType":"216","messageId":"217","endLine":128,"endColumn":173},{"ruleId":"214","severity":1,"message":"215","line":156,"column":49,"nodeType":"216","messageId":"217","endLine":156,"endColumn":136},{"ruleId":"214","severity":1,"message":"215","line":162,"column":49,"nodeType":"216","messageId":"217","endLine":162,"endColumn":133},{"ruleId":"214","severity":1,"message":"215","line":170,"column":49,"nodeType":"216","messageId":"217","endLine":170,"endColumn":171},{"ruleId":"214","severity":1,"message":"218","line":185,"column":49,"nodeType":"216","messageId":"217","endLine":185,"endColumn":178},{"ruleId":"214","severity":1,"message":"218","line":197,"column":49,"nodeType":"216","messageId":"217","endLine":197,"endColumn":178},{"ruleId":"214","severity":1,"message":"215","line":211,"column":49,"nodeType":"216","messageId":"217","endLine":211,"endColumn":153},{"ruleId":"214","severity":1,"message":"215","line":220,"column":49,"nodeType":"216","messageId":"217","endLine":220,"endColumn":142},{"ruleId":"214","severity":1,"message":"215","line":228,"column":49,"nodeType":"216","messageId":"217","endLine":228,"endColumn":133},{"ruleId":"214","severity":1,"message":"215","line":234,"column":49,"nodeType":"216","messageId":"217","endLine":234,"endColumn":156},{"ruleId":"214","severity":1,"message":"215","line":242,"column":49,"nodeType":"216","messageId":"217","endLine":242,"endColumn":136},{"ruleId":"214","severity":1,"message":"215","line":248,"column":49,"nodeType":"216","messageId":"217","endLine":248,"endColumn":142},{"ruleId":"210","severity":1,"message":"211","line":23,"column":56,"nodeType":"212","messageId":"213","endLine":23,"endColumn":58},{"ruleId":"222","severity":1,"message":"223","line":24,"column":28,"nodeType":"224","messageId":"225","endLine":24,"endColumn":30},{"ruleId":"210","severity":1,"message":"219","line":28,"column":21,"nodeType":"220","messageId":"221","endLine":28,"endColumn":28},{"ruleId":"206","severity":1,"message":"230","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"219","line":24,"column":23,"nodeType":"212","messageId":"231","endLine":24,"endColumn":25},{"ruleId":"232","severity":1,"message":"233","line":25,"column":239,"nodeType":"234","messageId":"235","endLine":25,"endColumn":269},{"ruleId":"236","severity":1,"message":"237","line":9,"column":54,"nodeType":"224","messageId":"238","endLine":9,"endColumn":55},{"ruleId":"222","severity":1,"message":"223","line":13,"column":26,"nodeType":"224","messageId":"225","endLine":13,"endColumn":28},{"ruleId":"214","severity":1,"message":"215","line":99,"column":37,"nodeType":"216","messageId":"217","endLine":99,"endColumn":138},{"ruleId":"214","severity":1,"message":"215","line":108,"column":37,"nodeType":"216","messageId":"217","endLine":108,"endColumn":153},{"ruleId":"214","severity":1,"message":"215","line":118,"column":37,"nodeType":"216","messageId":"217","endLine":118,"endColumn":151},{"ruleId":"214","severity":1,"message":"215","line":128,"column":37,"nodeType":"216","messageId":"217","endLine":128,"endColumn":154},{"ruleId":"214","severity":1,"message":"239","line":140,"column":37,"nodeType":"216","messageId":"217","endLine":140,"endColumn":177},{"ruleId":"214","severity":1,"message":"215","line":158,"column":45,"nodeType":"216","messageId":"217","endLine":158,"endColumn":135},{"ruleId":"214","severity":1,"message":"215","line":162,"column":45,"nodeType":"216","messageId":"217","endLine":162,"endColumn":138},{"ruleId":"214","severity":1,"message":"215","line":166,"column":45,"nodeType":"216","messageId":"217","endLine":166,"endColumn":136},{"ruleId":"214","severity":1,"message":"215","line":170,"column":45,"nodeType":"216","messageId":"217","endLine":170,"endColumn":136},{"ruleId":"214","severity":1,"message":"215","line":174,"column":45,"nodeType":"216","messageId":"217","endLine":174,"endColumn":138},{"ruleId":"214","severity":1,"message":"215","line":182,"column":37,"nodeType":"216","messageId":"217","endLine":182,"endColumn":141},{"ruleId":"214","severity":1,"message":"240","line":193,"column":45,"nodeType":"216","messageId":"217","endLine":193,"endColumn":133},{"ruleId":"214","severity":1,"message":"240","line":197,"column":45,"nodeType":"216","messageId":"217","endLine":197,"endColumn":133},{"ruleId":"214","severity":1,"message":"240","line":201,"column":45,"nodeType":"216","messageId":"217","endLine":201,"endColumn":131},{"ruleId":"214","severity":1,"message":"240","line":205,"column":45,"nodeType":"216","messageId":"217","endLine":205,"endColumn":131},{"ruleId":"214","severity":1,"message":"240","line":209,"column":45,"nodeType":"216","messageId":"217","endLine":209,"endColumn":133},{"ruleId":"214","severity":1,"message":"215","line":218,"column":45,"nodeType":"216","messageId":"217","endLine":218,"endColumn":144},{"ruleId":"214","severity":1,"message":"215","line":222,"column":45,"nodeType":"216","messageId":"217","endLine":222,"endColumn":144},{"ruleId":"214","severity":1,"message":"215","line":226,"column":45,"nodeType":"216","messageId":"217","endLine":226,"endColumn":142},{"ruleId":"214","severity":1,"message":"215","line":230,"column":45,"nodeType":"216","messageId":"217","endLine":230,"endColumn":142},{"ruleId":"214","severity":1,"message":"215","line":234,"column":45,"nodeType":"216","messageId":"217","endLine":234,"endColumn":144},{"ruleId":"214","severity":1,"message":"215","line":241,"column":37,"nodeType":"216","messageId":"217","endLine":241,"endColumn":150},{"ruleId":"214","severity":1,"message":"215","line":250,"column":37,"nodeType":"216","messageId":"217","endLine":250,"endColumn":112},{"ruleId":"214","severity":1,"message":"241","line":256,"column":37,"nodeType":"216","messageId":"217","endLine":256,"endColumn":125},{"ruleId":"214","severity":1,"message":"241","line":262,"column":37,"nodeType":"216","messageId":"217","endLine":262,"endColumn":137},{"ruleId":"214","severity":1,"message":"215","line":77,"column":15,"nodeType":"216","messageId":"217","endLine":77,"endColumn":111},{"ruleId":"232","severity":1,"message":"233","line":28,"column":230,"nodeType":"234","messageId":"235","endLine":28,"endColumn":237},{"ruleId":"222","severity":1,"message":"242","line":35,"column":48,"nodeType":"224","messageId":"225","endLine":35,"endColumn":50},{"ruleId":"232","severity":1,"message":"233","line":42,"column":226,"nodeType":"234","messageId":"235","endLine":42,"endColumn":233},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"no-unused-vars","'SearchResults' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component password must be in PascalCase or SCREAMING_SNAKE_CASE","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Component' is defined but never used.","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component file must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]