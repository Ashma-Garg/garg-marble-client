[{"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\index.js":"1","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\App.js":"2","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Mains.js":"3","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Washbasin.js":"4","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Taps.js":"5","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Toilet.js":"6","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Profile.js":"7","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Cart.js":"8","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Homepage.js":"9","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\LoginOwner.js":"10","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Detail.js":"11","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\BrandProducts.js":"12","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Wishlist.js":"13","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideNavbar.js":"14","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideBar.js":"15","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Login.js":"16","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\ProductsDisplay.js":"17","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Header.js":"18","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ColorLoader.js":"19","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\ViewModal.js":"20","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ImageLoader.js":"21","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\AddModal.js":"22","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Submenu.js":"23","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\functionHelper.js":"24","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\FullPreview.js":"25","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\DynamicCarousel.js":"26","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\shared\\constant.js":"27","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchBar.js":"28","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\CartDisplay.js":"29","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchResults.js":"30","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Confirm.js":"31","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\DeleteModal.js":"32","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Order.js":"33","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\OwnerOrder.js":"34","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\OrderShortDisplay.js":"35","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\OrderDetailDisplay.js":"36"},{"size":645,"mtime":1622888325781,"results":"37","hashOfConfig":"38"},{"size":467,"mtime":1624653462858,"results":"39","hashOfConfig":"38"},{"size":2094,"mtime":1624741717881,"results":"40","hashOfConfig":"38"},{"size":4728,"mtime":1624100728564,"results":"41","hashOfConfig":"38"},{"size":4622,"mtime":1624100851505,"results":"42","hashOfConfig":"38"},{"size":4653,"mtime":1624100868347,"results":"43","hashOfConfig":"38"},{"size":5130,"mtime":1623788887617,"results":"44","hashOfConfig":"38"},{"size":9292,"mtime":1624657610876,"results":"45","hashOfConfig":"38"},{"size":9753,"mtime":1624105086200,"results":"46","hashOfConfig":"38"},{"size":4341,"mtime":1623494472870,"results":"47","hashOfConfig":"38"},{"size":10904,"mtime":1624133958029,"results":"48","hashOfConfig":"38"},{"size":4916,"mtime":1624103028452,"results":"49","hashOfConfig":"38"},{"size":5693,"mtime":1623788949726,"results":"50","hashOfConfig":"38"},{"size":9125,"mtime":1623783322665,"results":"51","hashOfConfig":"38"},{"size":2604,"mtime":1624652479987,"results":"52","hashOfConfig":"38"},{"size":18729,"mtime":1623605099509,"results":"53","hashOfConfig":"38"},{"size":7372,"mtime":1624050660877,"results":"54","hashOfConfig":"38"},{"size":9233,"mtime":1624104129936,"results":"55","hashOfConfig":"38"},{"size":1223,"mtime":1623494511504,"results":"56","hashOfConfig":"38"},{"size":1158,"mtime":1623963803313,"results":"57","hashOfConfig":"38"},{"size":652,"mtime":1624209915329,"results":"58","hashOfConfig":"38"},{"size":17974,"mtime":1623784506877,"results":"59","hashOfConfig":"38"},{"size":345,"mtime":1621113765665,"results":"60","hashOfConfig":"38"},{"size":1178,"mtime":1621971330462,"results":"61","hashOfConfig":"38"},{"size":423,"mtime":1623963866196,"results":"62","hashOfConfig":"38"},{"size":1134,"mtime":1624103646130,"results":"63","hashOfConfig":"38"},{"size":110,"mtime":1624140577430,"results":"64","hashOfConfig":"38"},{"size":4363,"mtime":1624104720843,"results":"65","hashOfConfig":"38"},{"size":6108,"mtime":1624658146746,"results":"66","hashOfConfig":"38"},{"size":6348,"mtime":1624104863122,"results":"67","hashOfConfig":"38"},{"size":1706,"mtime":1624103133197,"results":"68","hashOfConfig":"38"},{"size":2207,"mtime":1624051895593,"results":"69","hashOfConfig":"38"},{"size":3942,"mtime":1624744065404,"results":"70","hashOfConfig":"38"},{"size":3623,"mtime":1624742293297,"results":"71","hashOfConfig":"38"},{"size":3449,"mtime":1624744275747,"results":"72","hashOfConfig":"38"},{"size":7992,"mtime":1624744100324,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1bv9h8u",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\index.js",[],["159","160"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\App.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Mains.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Washbasin.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Taps.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Toilet.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Profile.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Cart.js",["161"],"import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport { store } from 'react-notifications-component';\r\n\r\nimport {url} from '../shared/constant'\r\n\r\nimport SideBar from './CommonComponents/SideBar'\r\nimport SideNavbar from './CommonComponents/SideNavbar';\r\nimport Login from './Login'\r\nimport CartDisplay from './CommonComponents/CartDisplay'\r\nimport SearchBar from './CommonComponents/SearchBar';\r\n// import socket from 'socket.io-client'\r\n\r\n// const io=socket('/')\r\nlet notification = {\r\n    insert: \"top\",\r\n    container: \"top-right\",\r\n    animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n    animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n    dismiss: {\r\n        duration: 2000\r\n    }\r\n}\r\nclass Cart extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            isModalOpen: false,\r\n            notrefresh: null,\r\n            total: 0,\r\n            cartLength:Number\r\n        }\r\n        this.autoBagUpdate = this.autoBagUpdate.bind(this)\r\n        this.confirmorder=this.confirmorder.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        let customerId = localStorage.getItem(\"Ctoken\")\r\n        //Cart component will only be visible if customer is logged in\r\n        if (customerId) {\r\n            //service to list all products in Cart\r\n            axios.get(`${url}/customer/cart/${customerId}`)\r\n                .then(res => {\r\n                    //this variable is so that we can use this cart array's value later in ProductDisplay category field \r\n                    let cart = res.data\r\n                    this.setState({\r\n                        cartLength:cart.length\r\n                    })\r\n                    //this service is to find data for every prouct listed in cart\r\n                    axios.all(res.data.map((cartData) => axios.get(`${url}/${cartData.category}/cartInfo/${cartData.productId}`)))\r\n                        .then(axios.spread((...productsInfo) => {\r\n                            this.setState({\r\n                                //productsInfo is an array of all cart's product's items and that data is an array itself\r\n                                data: productsInfo.map((productInfo, i) => {\r\n                                    return (\r\n                                        productInfo.data.map(info => {\r\n                                            //to get Total amount of products added in bag\r\n                                            this.setState({\r\n                                                total: this.state.total + (cart[i].Quantity * info.Price)\r\n                                            })\r\n                                            if(info._id){\r\n                                            return (<CartDisplay\r\n                                                totalPrice={(price, price1) => this.totalPrice(price, price1)}\r\n                                                toggleModal={() => this.toggleModal()}\r\n                                                notRefreshed={(res) => this.notRefreshed(res)}\r\n                                                quantity={cart[i].Quantity}\r\n                                                category={cart[i].category} product={info} />)\r\n                                            }\r\n                                        }))\r\n                                })\r\n                            })\r\n\r\n                        }))\r\n                })\r\n\r\n            //to trigger autoUpdateBag when user is navigated away from /cart component\r\n            window.addEventListener(\"beforeunload\", this.autoBagUpdate)\r\n        }\r\n        //when no customer is signed in\r\n        else {\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    isModalOpen: !this.state.isModalOpen\r\n                })\r\n            }, 5000)\r\n        }\r\n\r\n    }\r\n\r\n    //to trigger autoUpdateBag when user is navigated away from /cart component\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"beforeunload\", this.autoBagUpdate);\r\n    }\r\n\r\n    //handles- when changes are made but not saved, it will save the changes automatically\r\n    async autoBagUpdate() {\r\n        let l = document.querySelectorAll(\"input[name=quantity]\")\r\n        let i = 0\r\n        let customerId = localStorage.getItem(\"Ctoken\")\r\n        var price = document.getElementsByClassName(\"cartPrice\")\r\n        let total = 0\r\n        while (l[i]) {\r\n            let quantity = l[i].value\r\n            let productId = l[i].id\r\n            total = total + (parseInt(price[i].innerHTML))\r\n            await axios.post(`${url}/customer/cart/updateQuantity`, { customerId, productId, quantity })\r\n                .then(res => {\r\n\r\n                })\r\n            i++;\r\n        }\r\n        this.setState({\r\n            total: total\r\n        })\r\n    }\r\n\r\n    //function to update the price as soon as quantity is changed by user\r\n    totalPrice(price, price1) {\r\n        this.setState({\r\n            total: this.state.total - price + price1\r\n        })\r\n    }\r\n    callSocketService(){\r\n        // io.emit(\"raise\",\"Socket Raised\")\r\n    }\r\n    async confirmorder(){\r\n        await this.autoBagUpdate()\r\n        let customerId = localStorage.getItem(\"Ctoken\")\r\n        let total=this.state.total\r\n        axios.post(`${url}/customer/confirmorder`,{customerId,total})\r\n        .then(res=>{\r\n            if(res.data.msg){\r\n                store.addNotification({\r\n                    ...notification,\r\n                    title: res.data.msg,\r\n                    message: \"You can check your orders in MyOrders on Right hand side Navbar.\",\r\n                    type: \"success\"\r\n                    \r\n                  });\r\n               document.getElementById('cart').style.display=\"none\"\r\n               this.setState({\r\n                   total:0\r\n               })\r\n            }\r\n            else if(res.data.error){\r\n                store.addNotification({\r\n                    ...notification,\r\n                    title: \"Order Not Confirmed!\",\r\n                    message: res.data.error,\r\n                    type: \"danger\"\r\n                  });\r\n            }\r\n        })\r\n    }\r\n    notRefreshed(res) {\r\n        this.setState({\r\n            notrefresh: res\r\n        })\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        })\r\n    }\r\n    render() {\r\n        if (localStorage.getItem(\"Ctoken\")) {\r\n            return (\r\n                <div style={{ overflowX: 'hidden'}}>\r\n                    <SideNavbar />\r\n                    <SearchBar className=\"col-12\"/>\r\n                    <Row className=\"col-10\" style={{marginTop:\"5rem\" }}>\r\n                        <Col className=\"col-8 m-auto\">\r\n                            {this.state.notrefresh ?\r\n                                <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                    <p>{this.state.notrefresh}</p>\r\n                                    <Button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                        <span aria-hidden=\"true\">&times;</span>\r\n                                    </Button>\r\n                                </div> : null\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{marginTop:\"5rem\"}}>\r\n                        <Col className=\"offset-3 col-5 ml-auto\">\r\n                            <p className=\"ml-auto\" style={{ color: \"darkkhaki\", fontWeight: \"700\" }}>Total: {this.state.total}</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <div id=\"cart\">\r\n                    {this.state.data}\r\n                    </div>\r\n                    {/* This button navigates to other location which will trigger autoUpdatebag automatically. */}\r\n                    {/* <a href=\"/toilet\">*/}\r\n                    {/* <Button className=\"mt-3\" onClick={()=>this.callSocketService()}>Confirm Order</Button> */}\r\n                    <Button disabled={this.state.cartLength===0?true:false} className=\"mt-3\" onClick={this.confirmorder}>Confirm Order</Button>\r\n                    {/*</a> */}\r\n                    \r\n                    <SideBar  hideAddProduct=\"true\"/>\r\n                </div>\r\n\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div style={{ overflowX: 'hidden' }}>\r\n                    <SideNavbar />\r\n                    <SearchBar className=\"col-12\"/>\r\n                    <Row  className=\"col-10\" style={{marginTop:\"10rem\",marginLeft:\"65px\"}}>\r\n                    <Col className=\"col-12\">\r\n                            <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                <p>Please Login to view your Cart List</p>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    {this.state.isModalOpen && <Login isModalOpen={this.state.isModalOpen} toggleModal={() => this.toggleModal()} />}\r\n                    <SideBar  hideAddProduct=\"true\" />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Cart;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Homepage.js",["162"],"import React, { Component } from 'react'\r\nimport { Carousel, Row, Col } from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport { Control, LocalForm } from 'react-redux-form'\r\n\r\nimport { url } from '../shared/constant'\r\n\r\nimport Header from './CommonComponents/Header'\r\nimport image from '../images/Main.jpg'\r\nimport '../css/homepage.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'reactstrap'\r\n\r\nclass Homepage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      typingTimer: 1,\r\n      doneTypingInterval: 1000,\r\n      searchArray: []\r\n    }\r\n    this.searchProduct = this.searchProduct.bind(this)\r\n    this.doneTyping = this.doneTyping.bind(this)\r\n    this.searchResults = this.searchResults.bind(this)\r\n  }\r\n  //triggers when user press any key\r\n  searchProduct(e) {\r\n    clearTimeout(this.state.typingTimer);\r\n    if (e.search) {\r\n      this.setState({\r\n        typingTimer: setTimeout(this.doneTyping, this.state.doneTypingInterval)\r\n      })\r\n    }\r\n  }\r\n  //when user stops writing for 0.7 sec and matching results are fetched\r\n  doneTyping() {\r\n    let search = document.getElementById(\"globalsearch\").value\r\n    axios.post(`${url}/masterproducts/search`, { search })\r\n      .then((res) => {\r\n        this.setState({\r\n          searchArray: res.data.map((matchedProducts) => {\r\n            return (matchedProducts)\r\n          })\r\n        })\r\n      })\r\n    search ? document.getElementById(\"searchArray\").style.display = \"block\" : document.getElementById(\"searchArray\").style.display = \"none\";\r\n  }\r\n  //clicked on any search results menu and render to that item's details page\r\n  searchResultrenderto(category, id) {\r\n    window.location.href = `/${category}/detail/${id}`\r\n  }\r\n  //if clicked or submited search bar form then all matching results will be displayed\r\n  searchResults() {\r\n    document.getElementById(\"searchArray\").style.display = \"none\";\r\n    document.getElementById('openSearchResults').click()\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Row>\r\n          <Col className=\"col-12 p-0\">\r\n            <div className=\"col-12\" style={{ position: 'absolute' }}>\r\n              <div className=\"overlay\"></div>\r\n              <div className=\"mdbcolsd col-12\">\r\n                <LocalForm onChange={this.searchProduct} onSubmit={this.searchResults}>\r\n                  <Row>\r\n                    <Control.text id=\"globalsearch\" className=\"form-control col-8 offset-2\" placeholder=\"Search\" model=\".search\" style={{ background: \"rgba(0, 0, 0, 0.4)\", color: \"white\" }} ></Control.text>\r\n                    <Button><Link id=\"openSearchResults\"\r\n                      to={{\r\n                        pathname: `/searchresults`,\r\n                        state: {\r\n                          sa: this.state.searchArray,\r\n                        },\r\n                      }}><i className=\"fa fa-search\" /></Link></Button>\r\n                  </Row>\r\n                  <ul className=\"form-control col-8 offset-2\" id=\"searchArray\" style={{ display: \"none\", boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\", backgroundColor: \"white\", listStyleType: \"none\", height: \"fit-content\" }}>\r\n                    {this.state.searchArray.slice(0, 5).map((ele) => {\r\n                      return (\r\n                        <li style={{ marginLeft: \"0\", height:\"fit-content\", padding: \"10px\", cursor: 'pointer' }} onClick={() => { this.searchResultrenderto(ele.category, ele._id) }}>{(ele.Brand + \" \" + ele.Name + \" \" + ele.Colors).toLowerCase()}</li>\r\n                      )\r\n                    })\r\n                    }\r\n                  </ul>\r\n                  <div className=\"sliderr mt-3 mb-3\">\r\n                    <p className=\"col-6 m-auto\">We provide you the best</p>\r\n                    <p className=\"col-8 m-auto\">EXPERIENCE</p>\r\n                  </div>\r\n                </LocalForm>\r\n              </div>\r\n            </div>\r\n            <img src={image} alt=\"Main\" style={{ width: \"100%\", height: \"77vh\" }} />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row style={{ paddingTop: \"100px\" }}>\r\n          <div className=\"col-sm-12 col-md-6 col-lg-4 d-inline-block\">\r\n            <Carousel>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQDkwsEzbofdPAhLy8aWJCzpm1os0MBgB1Xlg&usqp=CAU\"\r\n                  alt=\"First slide\"\r\n                />\r\n                <Carousel.Caption>\r\n                  <h3>ToiLet Seats</h3>\r\n                  <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQy6GtX0HM-a5DyUCYQtawHXj-Tf41aD-EF1w&usqp=CAU\"\r\n                  alt=\"Third slide\"\r\n                />\r\n\r\n                <Carousel.Caption>\r\n                  <h3>WashBasin</h3>\r\n                  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSXxZDYcRbZMiPTZQ05Z3URKfnzyhZZO4XVYw&usqp=CAU\"\r\n                  alt=\"Third slide\"\r\n                />\r\n\r\n                <Carousel.Caption>\r\n                  <h3>Taps</h3>\r\n                  <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n            </Carousel>\r\n          </div>\r\n          <div className=\"d-none d-sm-inline-block col-sm-6 col-lg-4\">\r\n            <Carousel>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQDkwsEzbofdPAhLy8aWJCzpm1os0MBgB1Xlg&usqp=CAU\"\r\n                  alt=\"First slide\"\r\n                />\r\n                <Carousel.Caption>\r\n                  <h3>ToiLet Seats</h3>\r\n                  <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQy6GtX0HM-a5DyUCYQtawHXj-Tf41aD-EF1w&usqp=CAU\"\r\n                  alt=\"Third slide\"\r\n                />\r\n\r\n                <Carousel.Caption>\r\n                  <h3>WashBasin</h3>\r\n                  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSXxZDYcRbZMiPTZQ05Z3URKfnzyhZZO4XVYw&usqp=CAU\"\r\n                  alt=\"Third slide\"\r\n                />\r\n\r\n                <Carousel.Caption>\r\n                  <h3>Taps</h3>\r\n                  <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n            </Carousel>\r\n          </div>\r\n          <div className=\"d-none d-lg-inline-block col-lg-4\">\r\n            <Carousel>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQDkwsEzbofdPAhLy8aWJCzpm1os0MBgB1Xlg&usqp=CAU\"\r\n                  alt=\"First slide\"\r\n                />\r\n                <Carousel.Caption>\r\n                  <h3>ToiLet Seats</h3>\r\n                  <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQy6GtX0HM-a5DyUCYQtawHXj-Tf41aD-EF1w&usqp=CAU\"\r\n                  alt=\"Third slide\"\r\n                />\r\n\r\n                <Carousel.Caption>\r\n                  <h3>WashBasin</h3>\r\n                  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n              <Carousel.Item interval=\"1000\">\r\n                <img\r\n                  style={{ height: \"50vh\" }}\r\n                  className=\"d-block w-100\"\r\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSXxZDYcRbZMiPTZQ05Z3URKfnzyhZZO4XVYw&usqp=CAU\"\r\n                  alt=\"Third slide\"\r\n                />\r\n\r\n                <Carousel.Caption>\r\n                  <h3>Taps</h3>\r\n                  <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n            </Carousel>\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Homepage;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\LoginOwner.js",["163","164"],"import axios from 'axios'\r\nimport React, { Component } from 'react'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\nimport { Control, LocalForm, Errors } from 'react-redux-form'\r\nimport { Button, Label, Col, Row} from 'reactstrap'\r\n\r\nimport {url} from '../shared/constant'\r\n\r\nconst required = (val) => val && val.length\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            error: null\r\n        }\r\n        this.submit = this.submit.bind(this)\r\n    }\r\n    submit(values) {\r\n            axios.post(`${url}/owner/login`, values)\r\n                .then(res => {\r\n                    if (res.data.data) {\r\n                        localStorage.setItem(\"Otoken\",res.data.data._id)\r\n                        window.location.href=\"/\"\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            error: res.data.err\r\n                        })\r\n                    }\r\n                })\r\n    }\r\n    render() {\r\n        return (\r\n                <Row className=\"col-12\">\r\n                    <Col className=\"col-12\">\r\n                        <Tabs defaultActiveKey=\"home\" id=\"uncontrolled-tab-example\">\r\n                            <Tab eventKey=\"home\" title=\"SignIn\">\r\n                                {this.state.error ?\r\n                                    <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                        <p>{this.state.error}</p>\r\n                                        <Button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                            <span aria-hidden=\"true\">&times;</span>\r\n                                        </Button>\r\n                                    </div> : null}\r\n                                <LocalForm className=\"m-5\" onSubmit={this.submit}>\r\n                                    <Row className=\"form-group\">\r\n                                        <Col className=\"col-3\">\r\n                                            <Label htmlFor=\"username\"><span style={{color:\"red\"}}>*</span>Username: </Label>\r\n                                        </Col>\r\n                                        <Col className=\"col-6\">\r\n                                            <Control.text className=\"form-control\" model=\".username\" id=\"email\" name=\"username\" validators={{ required}}></Control.text>\r\n                                            <Errors className=\"text-danger\" show=\"touched\" model=\".username\"\r\n                                                messages={{\r\n                                                    required: \"This Field is mandatory\"\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-3\">\r\n                                                <Label htmlFor=\"password\"><span style={{color:\"red\"}}>*</span>Password: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-6\">\r\n                                                <Control.password className=\"form-control\" model=\".password\" id=\"password\" name=\"password\" validators={{ required}} ></Control.password>\r\n                                                <Errors className=\"text-danger\" show=\"touched\" model=\".password\"\r\n                                                messages={{\r\n                                                    required: \"This Field is mandatory\"\r\n                                                }}\r\n                                            />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Col>\r\n                                            <Button className=\"btn btn-lg btn-primary mt-5 mb-3\" type=\"submit\">Submit</Button>\r\n                                        </Col>\r\n                            </LocalForm>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\nexport default Login;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Detail.js",["165","166","167"],"import React from 'react'\r\nimport { Component } from 'react';\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport axios from 'axios'\r\nimport { Tab, Tabs } from 'react-bootstrap';\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nimport SideNavbar from './SideNavbar'\r\nimport SideBar from './SideBar'\r\nimport { ImageLoader } from '../FunctionalComponent/ImageLoader';\r\nimport { ColorLoader } from '../FunctionalComponent/ColorLoader';\r\nimport ViewModal from '../Modals/ViewModal'\r\nimport Login from '../Login';\r\nimport SearchBar from './SearchBar';\r\n\r\nimport '../../css/Detail.css'\r\nclass Detail extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            productId: this.props.match.params.id,\r\n            details: null,\r\n            category: this.props.match.params.category,\r\n            isModalOpen: false,\r\n            product: null,\r\n            cartClass: \"col-8 btn btn-outline-warning btn-lg m-5\",\r\n            class: \"col-8 btn btn-outline-secondary btn-lg\",\r\n            wishlist: \"Add To Wishlist\",\r\n            notrefresh: null,\r\n            isLoginModal: false,\r\n            cart: \"Add to Cart\"\r\n        }\r\n\r\n        this.AddToWIshlist = this.AddToWIshlist.bind(this)\r\n        this.toggleModal = this.toggleModal.bind(this)\r\n        this.AddToCart = this.AddToCart.bind(this)\r\n    }\r\n    async componentWillMount() {\r\n        //see if the product has already been added to cart \r\n        await axios.get(`${url}/customer/info/${localStorage.getItem(\"Ctoken\")}`)\r\n            .then(CustomerCart => {\r\n                if (CustomerCart.data.Bag && CustomerCart.data.Bag.length) {\r\n                    for (let i = 0; i < CustomerCart.data.Bag.length; i++) {\r\n                        if (CustomerCart.data.Bag[i].category === this.state.category && CustomerCart.data.Bag[i].productId === this.state.productId) {\r\n                            this.setState({\r\n                                cartClass: \"col-8 btn btn-warning btn-lg m-5\",\r\n                                cart: \"Remove from Cart\"\r\n                            })\r\n                            break\r\n                        }\r\n                        else {\r\n                            this.setState({\r\n                                cartClass: \"col-8 btn btn-outline-warning btn-lg m-5\",\r\n                                cart: \"Add to Cart\"\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        cartClass: \"col-8 btn btn-outline-warning btn-lg m-5\",\r\n                        cart: \"Add to Cart\"\r\n                    })\r\n                }\r\n            })\r\n        //display all info of product\r\n        axios.get(`${url}/${this.state.category}/info/${this.state.productId}`)\r\n            .then(res => {\r\n                this.setState({\r\n                    details: res.data[0].map((p, i) => {\r\n                        return (\r\n                            <Row key={i} className=\"shadow-lg bg-white rounded rowSize col-11 ml-auto mr-lg-4 marginTopDetail\">\r\n                                <Col className=\"col-12 col-xl-7 manageHeight\" onClick={p.Image.length ? () => this.toggleViewModal(p) : null}>\r\n                                    <ImageLoader className=\"col-12\" image={p.Image} length={p.Image.length} category={this.state.category} />\r\n                                </Col>\r\n                                <Col className=\"mt-5 mb-5 col-12 col-xl-5\">\r\n                                    <h1 style={{ color: \"darkkhaki\", fontWeight: \"bolder\" }}>{p.Name}</h1>\r\n                                    <h2>{p.Brand}</h2>\r\n                                    <h1>Rs. {p.Price}</h1>\r\n                                    <p>On order below than Rs. 1800 shipping Charges will be applied.</p>\r\n                                    <Row className=\"col-12\">\r\n                                        <ColorLoader color={res.data[2]} currentProductId={this.state.productId} colorProductId={res.data[1]} category={this.state.category} />\r\n                                    </Row>\r\n                                    <h3>Size(Width * Height): {p.Size.Width}x{p.Size.Height}</h3>\r\n                                    <div className=\"col-8 bg-warning m-auto\"><p>Choose color to know your product price.</p></div>\r\n                                    <Button onClick={this.AddToCart} id={p._id + \"cart\"} className={this.state.cartClass}><i className=\"fa fa-shopping-bag\" aria-hidden=\"true\"></i>{this.state.cart}</Button>\r\n                                    {/* see if the product has already been added to wishlist */}\r\n                                    {\r\n                                        p.Customers.map((customer) => {\r\n                                            if (customer === localStorage.getItem(\"Ctoken\")) {\r\n                                                this.setState({\r\n                                                    class: \"col-8 btn btn-secondary btn-lg\",\r\n                                                    wishlist: \"Wishlisted\"\r\n                                                })\r\n                                                return;\r\n                                            }\r\n                                            else {\r\n                                                this.setState({\r\n                                                    class: \"col-8 btn btn-outline-secondary btn-lg\",\r\n                                                    wishlist: \"Add To Wishlist\"\r\n                                                })\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                    <Button onClick={this.AddToWIshlist} id={p._id + \"button\"} className={this.state.class}><i id={p._id + \"button\"} className=\"fa fa-heart custom-fa-heart\" aria-hidden=\"true\"></i>{this.state.wishlist}</Button>\r\n                                    <Tabs className=\"mt-3 navLinkManageStyling\" defaultActiveKey=\"description\" id=\"uncontrolled-tab-example\">\r\n                                        <Tab eventKey=\"description\" title=\"Description\">\r\n                                            {p.Description}\r\n                                        </Tab>\r\n                                        <Tab eventKey=\"features\" title=\"Features\">\r\n                                            {p.Features}\r\n                                        </Tab>\r\n                                    </Tabs>\r\n                                </Col>\r\n                            </Row>\r\n                        );\r\n                    })\r\n                })\r\n            })\r\n    }\r\n    //toggle full size screen display of image\r\n    toggleViewModal(p) {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen,\r\n            product: p\r\n        })\r\n    }\r\n    //add product to wishlist\r\n    AddToWIshlist(e) {\r\n        const customerId = localStorage.getItem('Ctoken')\r\n        let productId = e.target.id\r\n        productId = productId.substring(0, productId.length - 6)\r\n        let color;\r\n        let category = this.state.category\r\n        if (this.state.wishlist == \"Wishlisted\") {\r\n            color = \"rgb(255, 0, 0)\"\r\n        }\r\n        else {\r\n            color = \"rgb(211, 211, 211)\"\r\n        }\r\n        if (customerId) {\r\n            axios.post(`${url}/customer/wishlist`, { customerId, productId, color, category })\r\n                .then(res => {\r\n                    return;\r\n                })\r\n            axios.post(`${url}/${this.state.category}/addCustomer`, { productId, customerId, color })\r\n                .then(res => {\r\n                    if (res.data.message) {\r\n                        this.setState({\r\n                            notRefreshed: \"Please refresh the page. Some of the items has been Updated in Wishlist.\",\r\n                            class: [\"col-8\", \"btn\", \"btn-outline-secondary\", \"btn-lg\"],\r\n                            wishlist: this.state.wishlist\r\n                        })\r\n                    }\r\n                    else{\r\n                        window.location.reload()\r\n                    }\r\n                })\r\n\r\n            setTimeout(() => {\r\n                document.getElementById(e.target.id).innerHTML = `<i id=${productId + \"button\"} class=\"fa fa-heart custom-fa-heart\" aria-hidden=\"true\"></i>`\r\n                const b = document.getElementById(e.target.id)\r\n                b.classList = \"\"\r\n                b.classList.add(this.state.class[0], this.state.class[1], this.state.class[2], this.state.class[3])\r\n                var newElem = document.createTextNode(this.state.wishlist)\r\n                b.appendChild(newElem)\r\n\r\n            }, 100)\r\n        }\r\n        else {\r\n\r\n            this.toggleModal()\r\n        }\r\n    }\r\n    //toggle Login Modal\r\n    toggleModal() {\r\n        this.setState({\r\n            isLoginModal: !this.state.isLoginModal\r\n        })\r\n    }\r\n\r\n    //add product to cart\r\n    AddToCart(e) {\r\n\r\n        const customerId = localStorage.getItem('Ctoken')\r\n        let productId = this.state.productId\r\n        let category = this.state.category\r\n        let cart = this.state.cart\r\n        if (customerId) {\r\n            axios.post(`${url}/customer/add/cart`, { customerId, productId, category, cart })\r\n                .then(res => {\r\n                    if (!(res.data.error || res.err)) {\r\n                        window.location.reload()\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            notRefreshed: res.data.error\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            this.toggleModal()\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ overflowX: 'hidden' }}>\r\n\r\n                <SideNavbar/>\r\n                <SearchBar/>\r\n                {this.state.notRefreshed ?\r\n                    <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                        <p>{this.state.notRefreshed}</p>\r\n                        <Button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </Button>\r\n                    </div> : null}\r\n                {this.state.details}\r\n                <SideBar category={this.props.match.params.category} />\r\n                {this.state.isModalOpen && <ViewModal category={this.state.category} toggleViewModal={() => this.toggleViewModal()} product={this.state.product} isModelOpen={this.state.isModalOpen} />}\r\n                {this.state.isLoginModal && <Login isModalOpen={this.state.isLoginModal} toggleModal={() => this.toggleModal()} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Detail;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\BrandProducts.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Wishlist.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideNavbar.js",["168","169","170","171","172","173","174"],"import React from 'react'\r\nimport { Button, Row, Table } from 'reactstrap'\r\n\r\nimport { Brands } from '../FunctionalComponent/functionHelper'\r\nimport Login from '../Login'\r\nimport '../../css/SideNavbar.css'\r\nimport SubMenu from './Submenu'\r\n\r\n\r\nclass SideNavbar extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dropmenu1: Brands('washbasin'),\r\n            dropmenu2: Brands('toilet'),\r\n            dropmenu3: Brands('taps'),\r\n            dropdown1: false,\r\n            dropdown2: false,\r\n            dropdown3: false,\r\n            showsearch: null,\r\n            isModalOpen: false\r\n\r\n        }\r\n        this.logoutCustomer = this.logoutCustomer.bind(this)\r\n        this.toggleModal = this.toggleModal.bind(this)\r\n        this.toggleSideNav = this.toggleSideNav.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        let customerId = localStorage.getItem(\"Ctoken\") ? localStorage.getItem(\"Ctoken\") : null;\r\n        let ownerId = localStorage.getItem(\"Otoken\") ? localStorage.getItem(\"Otoken\") : null;\r\n        if (customerId||ownerId) {\r\n            document.getElementById(\"customerLogOut\").style.display = \"block\"\r\n            document.getElementById(\"customerLogIn\").style.display = \"none\"\r\n        }\r\n        else if(!(customerId&&ownerId)) {\r\n            document.getElementById(\"customerLogOut\").style.display = \"none\"\r\n            document.getElementById(\"customerLogIn\").style.display = \"block\"\r\n        }\r\n    }\r\n    async toggleSubMenu(id) {\r\n        await this.setState({\r\n            [id]: !this.state[`${id}`]\r\n        })\r\n        if (id === \"dropdown1\") {\r\n            this.setState({\r\n                dropdown2: false,\r\n                dropdown3: false\r\n            })\r\n        }\r\n        else if (id === \"dropdown2\") {\r\n            this.setState({\r\n                dropdown1: false,\r\n                dropdown3: false\r\n            })\r\n        }\r\n        else if (id === \"dropdown3\") {\r\n            this.setState({\r\n                dropdown2: false,\r\n                dropdown1: false\r\n            })\r\n        }\r\n    }\r\n    logoutCustomer() {\r\n        localStorage.removeItem(\"Ctoken\")\r\n        localStorage.removeItem(\"Otoken\")\r\n        window.location.reload(true)\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        })\r\n    }\r\n    toggleSideNav() {\r\n        if (this.state.active) {\r\n            let elem = document.getElementsByClassName(\"menu\")\r\n            elem[0].classList.remove(\"active\");\r\n\r\n            let e = document.getElementsByClassName(\"searchBar\")\r\n            e[0].classList.remove(\"col-9\", \"col-xl-8\", \"offset-3\", \"offset-xl-3\")\r\n            e[0].classList.add(\"col-10\", \"m-auto\")\r\n        }\r\n        else {\r\n            let elem = document.getElementsByClassName(\"menu\")\r\n            elem[0].classList.add(\"active\");\r\n\r\n            let e = document.getElementsByClassName(\"searchBar\")\r\n            e[0].classList.remove(\"col-10\", \"m-auto\")\r\n            e[0].classList.add(\"col-9\", \"col-xl-8\", \"offset-3\", \"offset-xl-3\")\r\n        }\r\n        this.setState({\r\n            active: !this.state.active\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <nav className=\"menu\" style={{width:\"245px\"}}>\r\n                    <ul className=\"nav flex-column overflow-scroll flex-nowrap sideNavUL\">\r\n                        <Table>\r\n                            <tr>\r\n                                <td>\r\n                                    <li id=\"business\">\r\n                                        <a href=\"/\">Garg Marble & Sanitary House</a>\r\n                                    </li>\r\n                                </td>\r\n                                <td><Button onClick={this.toggleSideNav} className=\"toggle-button ml-2 mt-1\" title=\"Toggle Side Navbar\"><i className=\"fa fa-bars p-0\" aria-hidden=\"true\"></i></Button></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link\" href='/'>Home</a>\r\n                                    </li>\r\n                                </td>\r\n                                <td>\r\n                                    <li className=\"nav-item\"><a href=\"/\"><i className=\"fa fa-home fa-3x\"></i></a></li>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link d-inline-block\" href=\"/washbasin\">Washbasin</a><span className=\"dropdown-toggle\" style={{ color: \"white\" }} onClick={() => this.toggleSubMenu(\"dropdown1\")}></span>\r\n                                    </li>\r\n                                </td>\r\n                                <td>\r\n                                    <li className=\"nav-item\"><a href=\"/washbasin\"><img src=\"https://img.icons8.com/color/48/000000/sink.png\" /></a></li>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{border:0}} colSpan=\"2\">{this.state.dropdown1 && <SubMenu category=\"washbasin\" list={this.state.dropmenu1} />}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link d-inline-block\" href=\"/toilet\">Toilet </a> <span className=\"dropdown-toggle\" style={{ color: \"white\" }} onClick={() => this.toggleSubMenu(\"dropdown2\")}></span>\r\n                                    </li>\r\n                                </td>\r\n                                <td>\r\n                                    <li className=\"nav-item\"><a href=\"/toilet\"><img src=\"https://img.icons8.com/fluent/48/000000/toilet-bowl.png\" /></a></li>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{border:0}} colSpan=\"2\">{this.state.dropdown2 && <SubMenu category=\"toilet\" list={this.state.dropmenu2} />}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link d-inline-block\" href=\"/taps\">Taps </a> <span className=\"dropdown-toggle\" style={{ color: \"white\" }} onClick={() => this.toggleSubMenu(\"dropdown3\")}></span>\r\n                                    </li>\r\n                                </td>\r\n                                <td>\r\n                                    <li className=\"nav-item\"><a href=\"/taps\"><img src=\"https://img.icons8.com/fluent/48/000000/piping.png\" /></a></li>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{border:0}} colSpan=\"2\">{this.state.dropdown3 && <SubMenu category=\"taps\" list={this.state.dropmenu3} />}</td>\r\n                            </tr>\r\n                            </Table>\r\n                            <Table className=\"mt-auto\">\r\n                            <tr id=\"customerLogOut\">\r\n                                <td>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link d-inline-block\" onClick={this.logoutCustomer} style={{ cursor: \"pointer\" }}>LogOut Account</a>\r\n                                    </li>\r\n                                </td>\r\n                                <td>\r\n                                    <li className=\"nav-item\"><a onClick={this.logoutCustomer}><i title=\"LogOut\" style={{color:\"white\"}} className=\"fa fa-sign-out fa-3x ml-auto\"></i></a></li>\r\n                                </td>\r\n                            </tr>\r\n                            <tr id=\"customerLogIn\">\r\n                                <td>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link d-inline-block\" onClick={this.toggleModal} style={{ cursor: \"pointer\" }}>LogIn Account</a>\r\n                                    </li>\r\n                                </td>\r\n                                <td>\r\n                                    <li className=\"nav-item\">\r\n                                        <a onClick={this.toggleModal}><i title=\"LogIn\" style={{color:\"white\"}} className=\"fa ml-auto fa-sign-in fa-3x\"></i></a>\r\n                                    </li>\r\n                                </td>\r\n                            </tr>\r\n                        </Table>\r\n                    </ul>\r\n                </nav>\r\n                {this.state.isModalOpen && <Login isModalOpen={this.state.isModalOpen} toggleModal={() => this.toggleModal()} />}\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideNavbar;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SideBar.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Login.js",["175","176","177","178","179","180","181","182","183","184","185","186","187"],"import axios from 'axios'\r\nimport React, { Component } from 'react'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\nimport { Control, LocalForm, Errors } from 'react-redux-form'\r\n// import { Redirect } from 'react-router'\r\nimport { Button, Label, Col, Row, ModalBody, Modal } from 'reactstrap'\r\n// import { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nimport { url } from '../shared/constant'\r\n\r\nconst required = (val) => val && val.length\r\n// const maxlength = (len) => (val) => !val || val.length <= len\r\n// const minlength = (len)=>(val) => val ? val.length >= len : 1;\r\nconst validEmail = (val) => !(val) || /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nconst pass = (val) => !(val) || /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,15}$/i.test(val);\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isModal: this.props.isModalOpen,\r\n            err: null,\r\n            error: null\r\n        }\r\n        this.toggleModal = this.toggleModal.bind(this)\r\n        this.submit = this.submit.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        // if (\"geolocation\" in navigator) {\r\n        //     console.log(\"Available\");\r\n        //     navigator.geolocation.getCurrentPosition(function(position) {\r\n        //         console.log(\"Latitude is :\", position.coords.latitude);\r\n        //         console.log(\"Longitude is :\", position.coords.longitude);\r\n        //       });\r\n        //   } else {\r\n        //     console.log(\"Not Available\");\r\n        //   }\r\n    }\r\n    async toggleModal() {\r\n        await this.setState({\r\n            isModal: !this.state.isModal\r\n        })\r\n        this.props.toggleModal()\r\n    }\r\n    submit(values) {\r\n        if (values.repassword) {\r\n            var custmer = {\r\n                first: values.first,\r\n                last: values.last,\r\n                email: values.Upemail,\r\n                password: values.Uppassword,\r\n                repassword: values.repassword,\r\n                number: values.number,\r\n                address: values.address,\r\n                pincode: values.pincode,\r\n                state: values.state,\r\n                city: values.city,\r\n                country: values.country\r\n            }\r\n            axios.post(`${url}/customer/add`, custmer)\r\n                .then(res => {\r\n                    if (res.data.err) {\r\n                        this.setState({\r\n                            err: res.data.err\r\n                        })\r\n                    }\r\n                    // else if (res.data.data && res.data.data.confirmed) {\r\n\r\n                    //     localStorage.setItem(\"Ctoken\", res.data.data._id)\r\n                    //     this.toggleModal()\r\n                    //     window.location.reload(true)\r\n                    // }\r\n                    else if(res.data.data && !res.data.data.confirmed){\r\n                        this.toggleModal()\r\n                        this.setState({\r\n                            err: null\r\n                        })\r\n                        alert('Check your Inbox to verify your email id.')\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            axios.post(`${url}/customer/login`, values)\r\n                .then(res => {\r\n                    if (res.data.data) {\r\n                        localStorage.setItem(\"Ctoken\", res.data.data._id)\r\n                        this.toggleModal()\r\n                        window.location.reload(true)\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            error: res.data.err\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal style={{ minWidth: \"80%\",height:\"fit-content\" }} isOpen={this.state.isModal} toggle={this.toggleModal}>\r\n                <ModalBody>\r\n                    <Row className=\"col-12\">\r\n                        <Col className=\"col-12\">\r\n                            <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\r\n                                <Tab eventKey=\"home\" title=\"SignIn\" style={{ marginTop: \"2rem\" }}>\r\n                                    {this.state.error ?\r\n                                        <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                            <p>{this.state.error}</p>\r\n                                            <Button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                                <span aria-hidden=\"true\">&times;</span>\r\n                                            </Button>\r\n                                        </div> : null}\r\n                                    <LocalForm onSubmit={this.submit}>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-12 col-md-3\">\r\n                                                <Label htmlFor=\"email\"><span style={{ color: \"red\" }}>*</span>Email Id: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-md-6\">\r\n                                                <Control.text className=\"form-control\" model=\".email\" id=\"email\" name=\"email\" validators={{ required, validEmail }}></Control.text>\r\n                                                <Errors className=\"text-danger\" show=\"touched\" model=\".email\"\r\n                                                    messages={{\r\n                                                        required: \"This Field is mandatory\",\r\n                                                        validEmail: \"Invalid Email\"\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-12 col-md-3\">\r\n                                                <Label htmlFor=\"password\"><span style={{ color: \"red\" }}>*</span>Password: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-md-6\">\r\n                                                <Control.password className=\"form-control\" model=\".password\" id=\"password\" name=\"password\" validators={{ required, pass }} ></Control.password>\r\n                                                <Errors className=\"text-danger\" show=\"touched\" model=\".password\"\r\n                                                    messages={{\r\n                                                        required: \"This Field is mandatory\",\r\n                                                        pass: \"Should contain uppercase, lowercase, number and special character and 8<=length<=15\"\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Col>\r\n                                            <Button className=\"btn btn-lg btn-primary mt-5 mb-3\" type=\"submit\">Submit</Button>\r\n                                        </Col>\r\n                                    </LocalForm>\r\n                                </Tab>\r\n                                <Tab eventKey=\"profile\" title=\"SignUp\" style={{marginTop:\"2rem\"}}>\r\n                                    {this.state.err ?\r\n                                        <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                            <p>{this.state.err}</p>\r\n                                            <button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                                <span aria-hidden=\"true\">&times;</span>\r\n                                            </button>\r\n                                        </div> : null}\r\n                                    <LocalForm onSubmit={this.submit}>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"first\"><span style={{ color: \"red\" }}>*</span>First Name: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.text className=\"form-control\" model=\".first\" id=\"first\" name=\"first\" required></Control.text>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"last\"><span style={{ color: \"red\" }}>*</span>Last Name: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.text className=\"form-control\" model=\".last\" id=\"last\" name=\"last\" required></Control.text>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"Upemail\"><span style={{ color: \"red\" }}>*</span>Email Id: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-9\">\r\n                                                <Control.text className=\"form-control\" model=\".Upemail\" id=\"Upemail\" name=\"Upemail\" validators={{ required, validEmail }}></Control.text>\r\n                                                <Errors className=\"text-danger\" show=\"touched\" model=\".Upemail\"\r\n                                                    messages={{\r\n                                                        required: \"This Field is mandatory\",\r\n                                                        validEmail: \"Invalid Email\"\r\n                                                    }}\r\n                                                />\r\n                                                <p style={{ color: \"orange\" }}>A confirmation mail will be send to your entered email id for verification.</p>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-3 col-sm-3\">\r\n                                                <Label htmlFor=\"Uppassword\"><span style={{ color: \"red\" }}>*</span>Password: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.password className=\"form-control\" model=\".Uppassword\" id=\"Uppassword\" name=\"Uppassword\" validators={{ required, pass }}></Control.password>\r\n                                                <Errors className=\"text-danger\" show=\"touched\" model=\".Uppassword\"\r\n                                                    messages={{\r\n                                                        required: \"This Field is mandatory\",\r\n                                                        pass: \"Should contain uppercase, lowercase, number and special character and 8<=length<=15\"\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"repassword\"><span style={{ color: \"red\" }}>*</span>Re-Enter Password: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.password className=\"form-control\" model=\".repassword\" id=\"repassword\" name=\"repassword\" validators={{ required, pass }}></Control.password>\r\n                                                <Errors className=\"text-danger\" show=\"touched\" model=\".repassword\"\r\n                                                    messages={{\r\n                                                        required: \"This Field is mandatory\",\r\n                                                        pass: \"Should contain uppercase, lowercase, number and special character and 8<=length<=15\"\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"form-group mt-sm-3\">\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"number\"><span style={{ color: \"red\" }}>*</span>Phone No: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-9\">\r\n                                                <Control.text type=\"number\" className=\"form-control\" model=\".number\" id=\"number\" name=\"number\" required></Control.text>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <p style={{ color: \"orange\",width:\"fit-content\" }} className=\"m-auto\">Remember you can not change your address later and this address will be considered as your shipping address.</p>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"address\"><span style={{ color: \"red\" }}>*</span>Street Address: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-9\">\r\n                                                <Control.text className=\"form-control\" model=\".address\" id=\"address\" name=\"address\" required></Control.text>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"city\"><span style={{ color: \"red\" }}>*</span>City/Town: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.text className=\"form-control\" model=\".city\" id=\"city\" name=\"city\" required></Control.text>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"pincode\"><span style={{ color: \"red\" }}>*</span>Pincode: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.text type=\"number\" className=\"form-control\" model=\".pincode\" id=\"pincode\" name=\"pincode\" required></Control.text>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"state\"><span style={{ color: \"red\" }}>*</span>State: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.text className=\"form-control\" model=\".state\" id=\"state\" name=\"state\" required></Control.text>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Label htmlFor=\"country\"><span style={{ color: \"red\" }}>*</span>Country: </Label>\r\n                                            </Col>\r\n                                            <Col className=\"col-12 col-sm-3\">\r\n                                                <Control.text className=\"form-control\" model=\".country\" id=\"country\" name=\"country\" required></Control.text>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col className=\"col-11\">\r\n                                                <Button className=\"offset-md-5 offset-3 col-6 col-md-3 btn btn-lg btn-dark mt-5 mb-3\" type=\"submit\">Submit</Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {/* <Row>\r\n                                    <Map google={this.props.google} zoom={14}>\r\n\r\n                                        <Marker onClick={this.onMarkerClick}\r\n                                            name={'Current location'} /> */}\r\n\r\n                                        {/* <InfoWindow onClose={this.onInfoWindowClose}>\r\n                                            <div>\r\n                                                <h1>{this.state.selectedPlace.name}</h1>\r\n                                            </div>\r\n                                        </InfoWindow> */}\r\n                                        {/* </Map>\r\n                                </Row> */}\r\n\r\n                                    </LocalForm>\r\n\r\n                                </Tab>\r\n                            </Tabs>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\nexport default Login;\r\n// export default GoogleApiWrapper({\r\n//     apiKey: (\"AIzaSyDPgfGuxoRXhQHaC9gJCk2SCt8SiZNJRMo\")\r\n//   })(Login)","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\ProductsDisplay.js",["188"],"import React, { Component } from 'react'\r\nimport { Card, CardBody, CardTitle, Col, Row } from 'reactstrap'\r\nimport axios from 'axios'\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nimport { ImageLoader } from '../FunctionalComponent/ImageLoader'\r\nimport '../../css/ProductDisplay.css'\r\n\r\nclass ProductDisplay extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            isOpen:false,\r\n            color:\"lightgrey\",\r\n            notRefreshed:null\r\n        }\r\n        this.AddToWishlist = this.AddToWishlist.bind(this)\r\n        this.deleteProduct=this.deleteProduct.bind(this)\r\n    }\r\n    componentDidMount(){\r\n\r\n        if(this.props.product.Customers){\r\n            this.props.product.Customers.every((customer)=>{\r\n                if(customer==localStorage.getItem('Ctoken')){\r\n                    this.setState({\r\n                        color:\"red\"\r\n                    })\r\n                    return false\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        color:\"lightgrey\"\r\n                    })\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n    }\r\n    deleteProduct(e){\r\n        this.props.toggleDeleteProductModal()\r\n        //start from toggleModal of AddModal(take reference from sidebar)\r\n    }\r\n    AddToWishlist(e) {\r\n        let productId=this.props.product._id\r\n        let customerId=localStorage.getItem(\"Ctoken\")\r\n        let category=this.props.category\r\n        if(customerId){        \r\n            var color=window.getComputedStyle(document.getElementById(e.target.id), null).getPropertyValue('color')\r\n            axios.post(`${url}/customer/wishlist`,{customerId,productId,color,category})\r\n            .then(res=>{\r\n                    return;\r\n            })\r\n            axios.post(`${url}/${this.props.category}/addCustomer`,{productId,customerId,color})\r\n            .then(res=>{\r\n                if (res.data.message) {\r\n                    this.setState({\r\n                        notRefreshed:\"Please refresh the page. Some of the items has been Updated in Wishlist.\"\r\n                    })\r\n                }\r\n                else if(color === 'rgb(211, 211, 211)'){\r\n                    document.getElementById(e.target.id).style.color = \"red\";\r\n                    let corr=document.getElementById(e.target.id).getBoundingClientRect ()\r\n                    this.props.addanimation(true,corr.x,corr.y)\r\n                    this.setState({\r\n                        notRefreshed:null\r\n                    })\r\n                }\r\n                else{\r\n                    document.getElementById(e.target.id).style.color = \"lightgrey\";\r\n                    this.props.addanimation(false,null,null)\r\n                    this.setState({\r\n                        notRefreshed:null\r\n                    })\r\n                }\r\n                this.props.notRefreshed(this.state.notRefreshed)\r\n            })\r\n        }\r\n        else{\r\n            this.props.toggleModal();\r\n        }\r\n    }\r\n    productDetail(id){\r\n        window.open(`/${this.props.category}/detail/${id}`)\r\n    }\r\n    render() {\r\n        return (\r\n            <Col className=\"col-10 col-sm-5 col-lg-4 col-xl-2 m-1 m-auto m-sm-0 m-lg-auto m-xl-2\" id={this.props.product._id + this.props.product.Name}>\r\n\r\n                {/* Will only be visible if window size is xs, sm */}\r\n                <Row onClick={()=>this.productDetail(this.props.product._id)} className=\"visibilityAccordance col-10 d-sm-none mt-5 pb-3\">\r\n                    <Row className=\"col-12 p-0 m-auto flex-nowrap\">\r\n                    <Col className=\"removePadding\">\r\n                        <ImageLoader category={this.props.category} image={this.props.product.Image[0]?this.props.product.Image[0]:null} length={1}/>\r\n                    </Col>\r\n                    </Row>\r\n                    <Row className=\"col-12 p-0 m-auto\">\r\n                    <Col>\r\n                        <div variant=\"subtitle1\">\r\n                            <div className=\"sub\">\r\n                                {this.props.product.Name} <span style={{fontWeight:\"100\",fontSize:\"12px\"}}> {this.props.product.Size.Width}x{this.props.product.Size.Height}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div variant=\"bod2\">\r\n                            <div className=\"body2\">\r\n                                {this.props.product.Brand}\r\n                            </div>\r\n                        </div>\r\n                        <div style={{fontWeight:\"100\",fontSize:\"12px\"}}>\r\n                                {this.props.product.Colors}\r\n                        </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Row>\r\n\r\n                {/* Will only be visible if window size is md or lg or xl */}\r\n                <Card className=\"shadow-lg mb-2 bg-white rounded visibilityAccess d-none d-sm-block\">\r\n                    <CardTitle id={this.props.product._id} onClick={()=>this.productDetail(this.props.product._id)} style={{padding:\"0px\"}}>\r\n                        <ImageLoader category={this.props.category} image={this.props.product.Image[0]?this.props.product.Image[0]:null} length={1} />\r\n                    </CardTitle>\r\n                    <CardBody id={this.props.product._id} style={{minHeight:\"110px\",maxHeight:\"fit-content\", paddingTop: \"0\" }}>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"subCard\">\r\n                                    {this.props.product.Name}\r\n                                </div>\r\n                                <div style={{fontWeight:\"100\",fontSize:'0.7rem',fontFamily:\"monospace\",textAlign:\"left\"}}>\r\n                                    {this.props.product.Colors}   <span style={{fontFamily:\"monospace\"}}>{this.props.product.Size.Width}x{this.props.product.Size.Height}</span>\r\n                                </div>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"body2Card\">\r\n                                    <p style={{margin:\"0\"}}>{this.props.product.Brand}</p>\r\n                                    <p style={{margin:\"0\"}}>Rs. {this.props.product.Price}</p>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"col-12\">\r\n                                {localStorage.getItem(\"Otoken\")?\r\n                                <div className=\"col-2 ml-auto\"><i id={this.props.product._id+\"edit\"} onClick={this.deleteProduct} className=\"fa fa-trash fa-2x\" style={{color:'red'}}></i></div>\r\n                                :\r\n                                <div className=\"col-2 ml-auto\"><i id={this.props.product._id+\"button\"} onClick={this.AddToWishlist} className=\"fa fa-heart fa-2x\" style={{color:this.state.color}} aria-hidden=\"true\"></i></div>\r\n                                }\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProductDisplay;\r\n\r\n","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Header.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ColorLoader.js",["189","190","191"],"import React, { Component } from 'react'\r\nimport { Col } from 'reactstrap'\r\n\r\n\r\nexport function ColorLoader(props) {\r\n    function addColorSelection(category,colorProductId) {\r\n        // props.colorPrice(e.target.id)\r\n        // let circle=document.getElementsByClassName(\"rounded-circle\")\r\n        // let i=0\r\n        // while(circle[i]){\r\n        //     if(circle[i].id===e.target.id){\r\n        //         circle[i].innerHTML=\"<i className='fa fa-check' style={{color:'blue'}} aria-hidden='true'></i>\"\r\n        //     }\r\n        //     else{\r\n        //         circle[i].innerHTML=\"\"\r\n        //     }\r\n        //     i++;\r\n        // }\r\n        window.location.href=`/${category}/detail/${colorProductId}`\r\n    }\r\n    var array = []\r\n    var colors = props.color\r\n    \r\n    colors.map((c, i) => {\r\n        array.push(<Col className=\"m-auto col-1 col-sm-2\"><p>{c}</p><div id={i} onClick={()=>addColorSelection(props.category,props.colorProductId[i])} style={{ display: \"inline\", margin: \"0px\" }} className=\"rounded-circle custom-circle\" style={{ backgroundColor: c }}>{props.currentProductId===props.colorProductId[i]?<i className='fa fa-check' aria-hidden='true'></i>:null}</div></Col>)\r\n    })\r\n    return array;\r\n\r\n}","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\ViewModal.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\ImageLoader.js",["192","193"],"import React from 'react';\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nimport DynamicCarousel from '../CommonComponents/DynamicCarousel'\r\n\r\nexport function ImageLoader(props){\r\n\r\n    let image=url + \"/\" + props.category + \"/images\" + \"/\" + props.image\r\n\r\n    return(\r\n        <div style={{height:\"100%\"}} >\r\n            {props.length==1?\r\n            <img id={props.id} className=\"image col-md-12\"\r\n            src={props.image!==null?image:require('../../images/Main.jpg').default}\r\n            alt={props.image!==null?props.image:null}/>:\r\n            <DynamicCarousel category={props.category} image={props.image}/>}\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\AddModal.js",["194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218"],"import React, { Component } from 'react';\r\nimport { Button, Col, Label, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport { LocalForm, Control, Errors } from 'react-redux-form'\r\nimport Axios from 'axios';\r\n\r\nimport {url} from '../../shared/constant'\r\n\r\nvar required = (val) => val && val.length;\r\nvar dataType = (val) => !(val) || /\\d+$/i.test(val);\r\nclass AddModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModal: this.props.isModalOpen\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.toggleAddModal = this.toggleAddModal.bind(this)\r\n        this.addCost = this.addCost.bind(this)\r\n    }\r\n    handleSubmit(values) {\r\n        const formData= new FormData();\r\n        formData.append('name',values.name)\r\n        formData.append(\"catalogue\",values.catalogue)\r\n        formData.append('width',values.width)\r\n        formData.append('Height',values.Height)\r\n        formData.append('material',values.material)\r\n        formData.append('warranty',values.warranty)\r\n        formData.append('brand',values.brand)\r\n        formData.append('desc',values.desc)\r\n        formData.append('features',values.features)\r\n        \r\n        formData.append('colors',values.colors)\r\n        let array=[]\r\n        let quantityArray=[]\r\n        let imageLength=[]\r\n        for(let i=0;i<values.colors.length;i++){\r\n            let price=\"price\"+values.colors[i]\r\n            let quantity=\"quantity\"+values.colors[i]\r\n            let im=\"image\"+values.colors[i]\r\n            if(values[im]){\r\n            for(var j=0;j<values[im].length;j++){\r\n                formData.append('file',values[im][j])\r\n            }\r\n            }\r\n            imageLength[i]=values[im] ? values[im].length : 0\r\n            array[i]=values[price]\r\n            quantityArray[i]=values[quantity]\r\n            \r\n        }\r\n        formData.append('price',array)\r\n        formData.append('quantity',quantityArray)\r\n        formData.append(\"imageLength\",[imageLength])\r\n        Axios.post(`${url}/${this.props.category}/add`,formData)\r\n        .then(res=>{\r\n            // window.location.href=`${url}/${this.props.category}`\r\n            console.log(res.data)\r\n        })\r\n    }\r\n    async toggleAddModal() {\r\n        await this.setState({\r\n            isModal: !this.state.isModal\r\n        });\r\n\r\n        this.props.toggleAddModal(this.state.isModal)\r\n    }\r\n    async addCost(e) {\r\n        let option = document.getElementsByTagName(\"option\")\r\n        let i = 0\r\n        while (option[i]) {\r\n            if (option[i].selected) {\r\n                document.getElementById(\"price\" + option[i].value).classList.remove(\"d-none\")\r\n                document.getElementById(\"quantity\" + option[i].value).classList.remove(\"d-none\")\r\n                document.getElementById(\"image\" + option[i].value).classList.remove(\"d-none\")\r\n            }\r\n            else {\r\n                document.getElementById(\"price\" + option[i].value).classList.add(\"d-none\")\r\n                document.getElementById(\"quantity\" + option[i].value).classList.add(\"d-none\")\r\n                document.getElementById(\"image\" + option[i].value).classList.add(\"d-none\")\r\n            }\r\n            i = i + 1;\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal style={{ minWidth: \"60%\" }} isOpen={this.state.isModal} toggle={this.toggleAddModal}>\r\n                <ModalHeader\r\n                    style={{ backgroundColor: \"#3464eb\", color: \"white\" }}\r\n                    toggle={this.toggleAddModal}\r\n                >\r\n                    <h3>Add New {this.props.category.toUpperCase()}</h3>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container\">\r\n                        <LocalForm encType=\"multipart/form-data\" onSubmit={this.handleSubmit} className=\"col-md-10\" validateOn=\"submit\">\r\n                            <Row className=\"form-group\" md={12}>\r\n                                <Label htmlFor=\"name\" md={3}><span style={{ color: \"red\" }}>* </span> Name: </Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".name\" id=\"name\" name=\"name\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".name\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"catalogue\" md={3}><span style={{ color: \"red\" }}>* </span> Catalogue No: </Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".catalogue\" id=\"catalogue\" name=\"catalogue\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".catalogue\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"size\"><span style={{ color: \"red\" }}>* </span> Size: </Label>\r\n                                <Col>\r\n                                    <Label htmlFor=\"width\"><span style={{ color: \"red\" }}>* </span> Width: </Label>\r\n                                    <Control.text className=\"form-control\" model=\".width\" id=\"width\" name=\"width\" validators={{ required, dataType }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".width\"\r\n                                        messages={{\r\n                                            required: \"This feild is required\",\r\n                                            dataType: \"Should be a Number\"\r\n                                        }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Label htmlFor=\"Height\"><span style={{ color: \"red\" }}>* </span> Height: </Label>\r\n                                    <Control.text className=\"form-control\" model=\".Height\" id=\"Height\" name=\"Height\" validators={{ required, dataType }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".Height\"\r\n                                        messages={{\r\n                                            required: \"This feild is required\",\r\n                                            dataType: \"Should be a Number\"\r\n                                        }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"colors\"><span style={{ color: \"red\" }}>* </span> Colors: </Label>\r\n                                <Col>\r\n                                    <Control.select onBlur={this.addCost} multiple className=\"form-control\" id=\"colors\" model=\".colors\" name=\"colors\" validators={{ required }}>\r\n                                        <option>White</option>\r\n                                        <option>Black</option>\r\n                                        <option>Grey</option>\r\n                                        <option>Ivory</option>\r\n                                        <option>Blue</option>\r\n                                    </Control.select>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".colors\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"price[]\"><span style={{ color: \"red\" }}>* </span> Price: </Label>\r\n                                <Col className=\"col-12 col-lg-9\">\r\n                                    <Row className=\"col-12\">\r\n                                        <Col id=\"priceBlack\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceBlack\"><span style={{ color: \"red\" }}>* </span> Black: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceBlack\" name=\"price[]\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceWhite\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceWhite\"><span style={{ color: \"red\" }}>* </span> White: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceWhite\" name=\"priceWhite\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceGrey\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceGrey\"><span style={{ color: \"red\" }}>* </span> Grey: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceGrey\" name=\"priceGrey\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceBlue\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceBlue\"><span style={{ color: \"red\" }}>* </span> Blue: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceBlue\" name=\"priceBlue\" />\r\n                                        </Col>\r\n                                        <Col id=\"priceIvory\" className=\"d-none col-6 col-lg-3\">\r\n                                            <Label htmlFor=\"priceIvory\"><span style={{ color: \"red\" }}>* </span> Ivory: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".priceIvory\" name=\"priceIvory\" />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"brand\"><span style={{ color: \"red\" }}>* </span> Brand: </Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".brand\" id=\"brand\" name=\"brand\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".brand\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"image\">Image: </Label>\r\n                                <Col className=\"col-12 col-lg-9\">                                \r\n                                        <Col id=\"imageBlack\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageBlack\">Black: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageBlack\" name=\"imageBlack\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageWhite\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageWhite\">White: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageWhite\" name=\"imageWhite\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageGrey\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageGrey\">Grey: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageGrey\" name=\"imageGrey\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageBlue\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageBlue\">Blue: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageBlue\" name=\"imageBlue\" />\r\n                                        </Col>\r\n                                        <Col id=\"imageIvory\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"imageIvory\">Ivory: </Label>\r\n                                            <Control.file multiple className=\"form-control\" model=\".imageIvory\" name=\"imageIvory\" />\r\n                                        </Col>     \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"quantity\"><span style={{ color: \"red\" }}>* </span> Quantity: </Label>\r\n                                <Col className=\"col-12 col-lg-9\">                                \r\n                                        <Col id=\"quantityBlack\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityBlack\">Black: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityBlack\" name=\"quantityBlack\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityWhite\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityWhite\">White: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityWhite\" name=\"quantityWhite\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityGrey\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityGrey\">Grey: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityGrey\" name=\"quantityGrey\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityBlue\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityBlue\">Blue: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityBlue\" name=\"quantityBlue\" />\r\n                                        </Col>\r\n                                        <Col id=\"quantityIvory\" className=\"d-none col-12\">\r\n                                            <Label htmlFor=\"quantityIvory\">Ivory: </Label>\r\n                                            <Control.text type=\"number\" className=\"form-control\" model=\".quantityIvory\" name=\"quantityIvory\" />\r\n                                        </Col>     \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"warranty\"><span style={{ color: \"red\" }}>* </span> Warranty:</Label>\r\n                                <Col>\r\n                                    <Control.text className=\"form-control\" model=\".warranty\" id=\"warranty\" name=\"warranty\" validators={{ required }}></Control.text>\r\n                                    <Errors className=\"text-danger\" show=\"touched\" model=\".warranty\"\r\n                                        messages={{ required: \"This feild is required\" }}>\r\n                                    </Errors>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Label md={3} htmlFor=\"material\">Material: </Label>\r\n                                <Col>\r\n                                    <Control.text name=\"material\" className=\"form-control\" model=\".material\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"desc\">Description: </Label>\r\n                                <Col>\r\n                                    <Control.textarea rows=\"5\" className=\"form-control\" model=\".desc\" id=\"desc\" name=\"desc\"></Control.textarea>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={3} htmlFor=\"features\">Features: </Label>\r\n                                <Col>\r\n                                    <Control.textarea rows=\"5\" className=\"form-control\" model=\".features\" id=\"features\" name=\"features\"></Control.textarea>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ offset: 4 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">Submit</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddModal;","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Submenu.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\FunctionalComponent\\functionHelper.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\FullPreview.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\DynamicCarousel.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\shared\\constant.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchBar.js",["219"],"import { React, Component } from 'react'\r\nimport { Control, LocalForm } from 'react-redux-form';\r\nimport { Button, Row, Col } from 'reactstrap'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { url } from '../../shared/constant'\r\nimport '../../css/SearchBar.css'\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      typingTimer: 1,\r\n      doneTypingInterval: 700,\r\n      searchArray: [],\r\n      active: false\r\n    }\r\n    this.searchProduct = this.searchProduct.bind(this)\r\n    this.doneTyping = this.doneTyping.bind(this)\r\n    this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    this.searchResults = this.searchResults.bind(this)\r\n  }\r\n  //if clicked anywhere then search menu should disappear\r\n  componentDidMount() {\r\n    document.addEventListener('mousedown', this.handleClickOutside);\r\n  }\r\n  //if clicked anywhere then search menu should disappear\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mousedown', this.handleClickOutside);\r\n  }\r\n  //if clicked anywhere then search menu should disappear after .5sec \r\n  handleClickOutside(event) {\r\n    setTimeout(()=>{\r\n      document.getElementById(\"searchArray\").style.display = \"none\"\r\n    },500) \r\n  }\r\n  //triggers when user press any key\r\n  searchProduct(e) {\r\n    clearTimeout(this.state.typingTimer);\r\n    this.setState({\r\n      typingTimer: setTimeout(this.doneTyping, this.state.doneTypingInterval)\r\n    })\r\n  }\r\n  //when user stops writing for 0.7 sec and matching results are fetched\r\n  doneTyping() {\r\n    let search = document.getElementById(\"globalsearch\").value\r\n    axios.post(`${url}/masterproducts/search`, { search })\r\n      .then((res) => {\r\n        if (res.data.length) {\r\n          this.setState({\r\n            searchArray: res.data.map((matchedProducts) => {\r\n              return (matchedProducts)\r\n            })\r\n          })\r\n        }\r\n        else {\r\n          this.setState({\r\n            searchArray: []\r\n          })\r\n        }\r\n      })\r\n    search ? document.getElementById(\"searchArray\").style.display = \"block\" : document.getElementById(\"searchArray\").style.display = \"none\";\r\n  }\r\n  //clicked on any search results menu and render to that item's details page\r\n  renderto(category, id) {\r\n    window.open(`/${category}/detail/${id}`)\r\n  }\r\n  //if clicked or submited search bar form then all matching results will be displayed\r\n  searchResults() {\r\n    document.getElementById(\"searchArray\").style.display = \"none\";\r\n    document.getElementById('openSearchResults').click()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-12 shadow-lg custom-color rounded styling\">\r\n        <LocalForm id=\"searchLocalForm\" className=\"searchBar pt-4 pb-4 col-8 col-sm-10 m-auto\" onSubmit={this.searchResults} onChange={this.searchProduct}>\r\n          <Row className=\"form-group\">\r\n            <Col className=\"col-9 col-sm-10 col-md-11 p-0\">\r\n              <Control.text id=\"globalsearch\" className=\"form-control\" placeholder=\"Search\" model=\".search\" />\r\n              <Col className=\"p-0 m-0\">\r\n                <ul className=\"form-control\" id=\"searchArray\" style={{ position: 'absolute', display: \"none\", boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\", backgroundColor: \"white\", listStyleType: \"none\", height: \"fit-content\" }}>\r\n                  {this.state.searchArray.slice(0,5).map((ele,i) => {\r\n                    return (\r\n                      <li key={i} style={{ marginLeft: \"0\", height: \"fit-content\", padding: \"10px\", cursor: 'pointer' }} onClick={() => { this.renderto(ele.category, ele._id) }}>{(ele.Brand + \" \" + ele.Name + \" \" + ele.Colors).toLowerCase()}</li>\r\n                    )\r\n                  })\r\n                  }\r\n                </ul>\r\n              </Col>\r\n            </Col>\r\n            <Col className=\"p-0\">\r\n              <Button type=\"submit p-0\">\r\n                <Link id=\"openSearchResults\"\r\n                to={{\r\n                  pathname: `/searchresults`,\r\n                  state: {\r\n                    sa: this.state.searchArray,\r\n                  },\r\n                }}>\r\n                <i className=\"fa fa-search\"/>\r\n                </Link>\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </LocalForm>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default SearchBar","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\CartDisplay.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\SearchResults.js",["220","221"],"import React, { Component } from 'react';\r\nimport { Button, Row, Col } from 'reactstrap';\r\n\r\nimport SideNavbar from './SideNavbar';\r\nimport SideBar from './SideBar'\r\nimport ProductDisplay from './ProductsDisplay';\r\nimport Login from '../Login';\r\nimport SearchBar from './SearchBar';\r\nimport '../../css/Washbasin.css'\r\nimport DeleteModal from '../Modals/DeleteModal';\r\n\r\nclass SearchResults extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            search_Results_list: this.props.history.location.state?this.props.history.location.state.sa:null,\r\n            search_reasult: null,\r\n            isModalOpen: false,\r\n            isDeleteModalOpen: false,\r\n            notrefresh: null,\r\n            xCor: 0,\r\n            yCor: 0,\r\n            DeleteProduct: null,\r\n            key: Number\r\n        }\r\n    }\r\n    //products got from link props\r\n    componentDidMount() {\r\n        if (this.props.history.location.state && this.props.history.location.state.sa.length) {\r\n            this.setState({\r\n                search_Results: this.state.search_Results_list.map((wb, i) => {\r\n                    return (\r\n                        <ProductDisplay toggleDeleteProductModal={() => this.toggleDeleteProductModal(wb)} key={i} addanimation={(val, x, y) => this.addanimation(val, x, y)} toggleModal={() => this.toggleModal()} notRefreshed={(res) => this.notRefreshed(res)} category={'washbasin'} product={wb} key={i} />\r\n                    );\r\n                })\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                search_Results:null\r\n            })\r\n        }\r\n        //so that when user refresh the page then there is no search string\r\n        window.history.replaceState(window.location.pathname,null)\r\n    }\r\n    //if search string is updated then update the product display\r\n    componentDidUpdate() {\r\n        if (this.props.history.location.state && (this.props.history.location.state.sa != this.state.search_Results_list)){\r\n            this.setState({\r\n                search_Results_list: this.props.history.location.state.sa\r\n            })\r\n            this.setState({\r\n                search_Results: this.props.history.location.state.sa.map((wb, i) => {\r\n                    return (\r\n                        <ProductDisplay toggleDeleteProductModal={() => this.toggleDeleteProductModal(wb)} addanimation={(val, x, y) => this.addanimation(val, x, y)} toggleModal={() => this.toggleModal()} notRefreshed={(res) => this.notRefreshed(res)} category={wb.category} product={wb} key={i} />\r\n                    );\r\n                })\r\n            })\r\n        }\r\n        window.history.replaceState(window.location.pathname,null)\r\n    }\r\n    //if product details are not refreshed\r\n    notRefreshed(res) {\r\n        this.setState({\r\n            notrefresh: res\r\n        })\r\n    }\r\n    //toggle login modal\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        })\r\n    }\r\n    //toggle delete momdal\r\n    toggleDeleteProductModal(val) {\r\n        if (val === true) {\r\n            document.getElementById(this.state.DeleteProduct._id+this.state.DeleteProduct.Name).style.display=\"none\"\r\n        }\r\n        this.setState({\r\n            isDeleteModalOpen: !this.state.isDeleteModalOpen,\r\n            DeleteProduct: val\r\n        })\r\n    }\r\n    //add animation when product is added to wishlist\r\n    addanimation(val, x, y) {\r\n        this.setState({\r\n            xCor: x,\r\n            yCor: y\r\n        })\r\n        if (val) {\r\n            let animateRow = document.getElementsByClassName(\"animateRow\")\r\n            animateRow[0].classList.add(\"animateRowZIndex\")\r\n            let animation = document.getElementsByClassName(\"animateId\")\r\n            animation[0].classList.add(\"animateWishlistButton\");\r\n            setTimeout(() => {\r\n                animateRow[0].classList.remove(\"animateRowZIndex\")\r\n                animation[0].classList.remove(\"animateWishlistButton\");\r\n            }, 1000)\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ overflowX: 'hidden' }}>\r\n                <SideNavbar />\r\n                <SearchBar className=\"col-12\" />\r\n                <Row className=\"col-12 marginTop\">\r\n                    <Col className=\"col-8 m-auto\">\r\n                        {this.state.notrefresh ?\r\n                            <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                <p>{this.state.notrefresh}</p>\r\n                                <Button className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </Button>\r\n                            </div> : null\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{ position: \"fixed\" }} className=\"col-10 offset-2 animateRow\">\r\n                    <i className=\"fa fa-heart fa-5x animateId\" style={{ marginLeft: this.state.xCor - 300, marginTop: this.state.yCor - 200, color: \"red\" }}></i>\r\n                </Row>\r\n                <p id=\"searchArray\"></p>\r\n                <Row className=\"col-11 col-xl-12 p-0\" style={{ marginLeft: \"65px\" }} >\r\n                    {this.state.search_Results !== null ? this.state.search_Results : <div className=\"m-auto pl-2 pr-5\"><p className=\"m-auto\" style={{ fontWeight: \"700\", fontSize: \"2rem\", color: 'grey' }}>No Records found</p><div><p style={{ color: 'grey' }}>Either you didn't type anything or there are no matching results to your search.</p><p style={{ color: 'grey' }}>If you have refreshed the page then search again because all the progress has been lost.</p></div></div>}\r\n                </Row>\r\n             \r\n                {this.state.isModalOpen && <Login isModalOpen={this.state.isModalOpen} toggleModal={() => this.toggleModal()} />}\r\n                {this.state.isDeleteModalOpen && <DeleteModal category={this.state.DeleteProduct.category} key={this.state.key} DeleteProduct={this.state.DeleteProduct} isModalOpen={this.state.isDeleteModalOpen} toggleDeleteModal={(val) => this.toggleDeleteProductModal(val)} />}\r\n                <SideBar hideAddProduct=\"true\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SearchResults;\r\n\r\n\r\n","C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\Confirm.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Modals\\DeleteModal.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\Order.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\OwnerOrder.js",[],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\OrderShortDisplay.js",["222"],"C:\\Users\\HP PC\\Desktop\\compweb\\garg-marble\\client\\src\\component\\CommonComponents\\OrderDetailDisplay.js",[],{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":58,"column":67,"nodeType":"229","messageId":"230","endLine":58,"endColumn":69},{"ruleId":"231","severity":1,"message":"232","line":68,"column":21,"nodeType":"233","messageId":"234","endLine":68,"endColumn":192},{"ruleId":"231","severity":1,"message":"232","line":52,"column":45,"nodeType":"233","messageId":"234","endLine":52,"endColumn":154},{"ruleId":"231","severity":1,"message":"235","line":65,"column":49,"nodeType":"233","messageId":"234","endLine":65,"endColumn":166},{"ruleId":"227","severity":1,"message":"228","line":90,"column":68,"nodeType":"229","messageId":"230","endLine":90,"endColumn":70},{"ruleId":"227","severity":1,"message":"236","line":96,"column":49,"nodeType":"237","messageId":"238","endLine":96,"endColumn":56},{"ruleId":"239","severity":1,"message":"240","line":136,"column":33,"nodeType":"241","messageId":"242","endLine":136,"endColumn":35},{"ruleId":"243","severity":1,"message":"244","line":125,"column":83,"nodeType":"233","endLine":125,"endColumn":144},{"ruleId":"243","severity":1,"message":"244","line":138,"column":80,"nodeType":"233","endLine":138,"endColumn":149},{"ruleId":"243","severity":1,"message":"244","line":151,"column":78,"nodeType":"233","endLine":151,"endColumn":142},{"ruleId":"245","severity":1,"message":"246","line":162,"column":41,"nodeType":"233","endLine":162,"endColumn":140},{"ruleId":"245","severity":1,"message":"246","line":166,"column":62,"nodeType":"233","endLine":166,"endColumn":95},{"ruleId":"245","severity":1,"message":"246","line":172,"column":41,"nodeType":"233","endLine":172,"endColumn":137},{"ruleId":"245","severity":1,"message":"246","line":177,"column":41,"nodeType":"233","endLine":177,"endColumn":71},{"ruleId":"231","severity":1,"message":"232","line":119,"column":49,"nodeType":"233","messageId":"234","endLine":119,"endColumn":165},{"ruleId":"231","severity":1,"message":"235","line":133,"column":49,"nodeType":"233","messageId":"234","endLine":133,"endColumn":173},{"ruleId":"231","severity":1,"message":"232","line":161,"column":49,"nodeType":"233","messageId":"234","endLine":161,"endColumn":136},{"ruleId":"231","severity":1,"message":"232","line":167,"column":49,"nodeType":"233","messageId":"234","endLine":167,"endColumn":133},{"ruleId":"231","severity":1,"message":"232","line":175,"column":49,"nodeType":"233","messageId":"234","endLine":175,"endColumn":171},{"ruleId":"231","severity":1,"message":"235","line":190,"column":49,"nodeType":"233","messageId":"234","endLine":190,"endColumn":178},{"ruleId":"231","severity":1,"message":"235","line":202,"column":49,"nodeType":"233","messageId":"234","endLine":202,"endColumn":178},{"ruleId":"231","severity":1,"message":"232","line":216,"column":49,"nodeType":"233","messageId":"234","endLine":216,"endColumn":153},{"ruleId":"231","severity":1,"message":"232","line":225,"column":49,"nodeType":"233","messageId":"234","endLine":225,"endColumn":142},{"ruleId":"231","severity":1,"message":"232","line":233,"column":49,"nodeType":"233","messageId":"234","endLine":233,"endColumn":133},{"ruleId":"231","severity":1,"message":"232","line":239,"column":49,"nodeType":"233","messageId":"234","endLine":239,"endColumn":156},{"ruleId":"231","severity":1,"message":"232","line":247,"column":49,"nodeType":"233","messageId":"234","endLine":247,"endColumn":136},{"ruleId":"231","severity":1,"message":"232","line":253,"column":49,"nodeType":"233","messageId":"234","endLine":253,"endColumn":142},{"ruleId":"239","severity":1,"message":"240","line":25,"column":28,"nodeType":"241","messageId":"242","endLine":25,"endColumn":30},{"ruleId":"247","severity":1,"message":"248","line":1,"column":17,"nodeType":"249","messageId":"250","endLine":1,"endColumn":26},{"ruleId":"227","severity":1,"message":"236","line":24,"column":23,"nodeType":"229","messageId":"251","endLine":24,"endColumn":25},{"ruleId":"252","severity":1,"message":"253","line":25,"column":239,"nodeType":"254","messageId":"255","endLine":25,"endColumn":269},{"ruleId":"256","severity":1,"message":"257","line":9,"column":54,"nodeType":"241","messageId":"258","endLine":9,"endColumn":55},{"ruleId":"239","severity":1,"message":"240","line":13,"column":26,"nodeType":"241","messageId":"242","endLine":13,"endColumn":28},{"ruleId":"231","severity":1,"message":"232","line":99,"column":37,"nodeType":"233","messageId":"234","endLine":99,"endColumn":138},{"ruleId":"231","severity":1,"message":"232","line":108,"column":37,"nodeType":"233","messageId":"234","endLine":108,"endColumn":153},{"ruleId":"231","severity":1,"message":"232","line":118,"column":37,"nodeType":"233","messageId":"234","endLine":118,"endColumn":151},{"ruleId":"231","severity":1,"message":"232","line":128,"column":37,"nodeType":"233","messageId":"234","endLine":128,"endColumn":154},{"ruleId":"231","severity":1,"message":"259","line":140,"column":37,"nodeType":"233","messageId":"234","endLine":140,"endColumn":177},{"ruleId":"231","severity":1,"message":"232","line":158,"column":45,"nodeType":"233","messageId":"234","endLine":158,"endColumn":135},{"ruleId":"231","severity":1,"message":"232","line":162,"column":45,"nodeType":"233","messageId":"234","endLine":162,"endColumn":138},{"ruleId":"231","severity":1,"message":"232","line":166,"column":45,"nodeType":"233","messageId":"234","endLine":166,"endColumn":136},{"ruleId":"231","severity":1,"message":"232","line":170,"column":45,"nodeType":"233","messageId":"234","endLine":170,"endColumn":136},{"ruleId":"231","severity":1,"message":"232","line":174,"column":45,"nodeType":"233","messageId":"234","endLine":174,"endColumn":138},{"ruleId":"231","severity":1,"message":"232","line":182,"column":37,"nodeType":"233","messageId":"234","endLine":182,"endColumn":141},{"ruleId":"231","severity":1,"message":"260","line":193,"column":45,"nodeType":"233","messageId":"234","endLine":193,"endColumn":133},{"ruleId":"231","severity":1,"message":"260","line":197,"column":45,"nodeType":"233","messageId":"234","endLine":197,"endColumn":133},{"ruleId":"231","severity":1,"message":"260","line":201,"column":45,"nodeType":"233","messageId":"234","endLine":201,"endColumn":131},{"ruleId":"231","severity":1,"message":"260","line":205,"column":45,"nodeType":"233","messageId":"234","endLine":205,"endColumn":131},{"ruleId":"231","severity":1,"message":"260","line":209,"column":45,"nodeType":"233","messageId":"234","endLine":209,"endColumn":133},{"ruleId":"231","severity":1,"message":"232","line":218,"column":45,"nodeType":"233","messageId":"234","endLine":218,"endColumn":144},{"ruleId":"231","severity":1,"message":"232","line":222,"column":45,"nodeType":"233","messageId":"234","endLine":222,"endColumn":144},{"ruleId":"231","severity":1,"message":"232","line":226,"column":45,"nodeType":"233","messageId":"234","endLine":226,"endColumn":142},{"ruleId":"231","severity":1,"message":"232","line":230,"column":45,"nodeType":"233","messageId":"234","endLine":230,"endColumn":142},{"ruleId":"231","severity":1,"message":"232","line":234,"column":45,"nodeType":"233","messageId":"234","endLine":234,"endColumn":144},{"ruleId":"231","severity":1,"message":"232","line":241,"column":37,"nodeType":"233","messageId":"234","endLine":241,"endColumn":150},{"ruleId":"231","severity":1,"message":"232","line":250,"column":37,"nodeType":"233","messageId":"234","endLine":250,"endColumn":112},{"ruleId":"231","severity":1,"message":"261","line":256,"column":37,"nodeType":"233","messageId":"234","endLine":256,"endColumn":125},{"ruleId":"231","severity":1,"message":"261","line":262,"column":37,"nodeType":"233","messageId":"234","endLine":262,"endColumn":137},{"ruleId":"231","severity":1,"message":"232","line":81,"column":15,"nodeType":"233","messageId":"234","endLine":81,"endColumn":111},{"ruleId":"252","severity":1,"message":"253","line":33,"column":297,"nodeType":"254","messageId":"255","endLine":33,"endColumn":304},{"ruleId":"239","severity":1,"message":"262","line":48,"column":88,"nodeType":"241","messageId":"242","endLine":48,"endColumn":90},{"ruleId":"247","severity":1,"message":"263","line":4,"column":9,"nodeType":"249","messageId":"250","endLine":4,"endColumn":13},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component password must be in PascalCase or SCREAMING_SNAKE_CASE","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component file must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","Expected '!==' and instead saw '!='.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]